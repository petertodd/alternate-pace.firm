gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 6-24-2008  22:59:29
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:36 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:59:29 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_display
                                           	global _display_digits_real
                                           	global _dot1
                                           	global _output_digit
                                           	global _output_flipped_digit
                                           	global _char_to_digit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           	idata
                                           _dot1	db	0x01
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_display_0	udata
                                           _output_digit_w_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_display__display_digits_real	code
                                           _display_digits_real:
                                           ;	.line	92; display.c	void display_digits_real(uint8_t d0,uint8_t d1,uint8_t d2,uint8_t d3,uint8_t d4,uint8_t d5){
00054a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00054c   ffe5
00054e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000550   ffd9
000552   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000554   ffe5
000556   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000558   ffe5
00055a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00055c   ffe5
00055e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000560   ffe5
000562   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000564   ffe5
000566   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000568   ffe5
00056a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00056c   ffe5
00056e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000570   ffe5
000572   0e02     movlw	0x2                	MOVLW	0x02
000574   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000576   f000
000578   0e03     movlw	0x3                	MOVLW	0x03
00057a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00057c   f001
00057e   0e04     movlw	0x4                	MOVLW	0x04
000580   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000582   f002
000584   0e05     movlw	0x5                	MOVLW	0x05
000586   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000588   f003
00058a   0e06     movlw	0x6                	MOVLW	0x06
00058c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00058e   f004
000590   0e07     movlw	0x7                	MOVLW	0x07
000592   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000594   f005
                                           ;	.line	94; display.c	LATBbits.LATB3 = 0;
000596   968a     bcf	0x8a, 0x3, 0         	BCF	_LATBbits, 3
                                           ;	.line	97; display.c	output_flipped_digit(char_to_digit[d5]);
000598   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
00059a   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
00059c   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
00059e   6a06     clrf	0x6, 0              	CLRF	r0x06
0005a0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0005a2   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0005a4   6a07     clrf	0x7, 0              	CLRF	r0x07
0005a6   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0005a8   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
0005aa   fff6
0005ac   c006     movff	0x6, 0xff7         	MOVFF	r0x06, TBLPTRH
0005ae   fff7
0005b0   c007     movff	0x7, 0xff8         	MOVFF	r0x07, TBLPTRU
0005b2   fff8
0005b4   0009     tblrd	*+                 	TBLRD*+	
0005b6   cff5     movff	0xff5, 0x5         	MOVFF	TABLAT, r0x05
0005b8   f005
0005ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005be   ecf4     call	0xde8, 0            	CALL	_output_flipped_digit
0005c0   f006
0005c2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	98; display.c	output_flipped_digit(char_to_digit[d4] | b(00000001)); 
0005c4   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
0005c6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005c8   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
0005ca   6a05     clrf	0x5, 0              	CLRF	r0x05
0005cc   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0005ce   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0005d0   6a06     clrf	0x6, 0              	CLRF	r0x06
0005d2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0005d4   c004     movff	0x4, 0xff6         	MOVFF	r0x04, TBLPTRL
0005d6   fff6
0005d8   c005     movff	0x5, 0xff7         	MOVFF	r0x05, TBLPTRH
0005da   fff7
0005dc   c006     movff	0x6, 0xff8         	MOVFF	r0x06, TBLPTRU
0005de   fff8
0005e0   0009     tblrd	*+                 	TBLRD*+	
0005e2   cff5     movff	0xff5, 0x4         	MOVFF	TABLAT, r0x04
0005e4   f004
0005e6   8004     bsf	0x4, 0, 0            	BSF	r0x04, 0
0005e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005ec   ecf4     call	0xde8, 0            	CALL	_output_flipped_digit
0005ee   f006
0005f0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	99; display.c	output_digit(char_to_digit[d3] | b(00000001));
0005f2   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
0005f4   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0005f6   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
0005f8   6a04     clrf	0x4, 0              	CLRF	r0x04
0005fa   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0005fc   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0005fe   6a05     clrf	0x5, 0              	CLRF	r0x05
000600   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000602   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
000604   fff6
000606   c004     movff	0x4, 0xff7         	MOVFF	r0x04, TBLPTRH
000608   fff7
00060a   c005     movff	0x5, 0xff8         	MOVFF	r0x05, TBLPTRU
00060c   fff8
00060e   0009     tblrd	*+                 	TBLRD*+	
000610   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
000612   f003
000614   8003     bsf	0x3, 0, 0            	BSF	r0x03, 0
000616   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061a   ecb9     call	0x972, 0            	CALL	_output_digit
00061c   f004
00061e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	100; display.c	output_flipped_digit(char_to_digit[d2] | b(00000001));
000620   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
000622   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000624   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
000626   6a03     clrf	0x3, 0              	CLRF	r0x03
000628   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00062a   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
00062c   6a04     clrf	0x4, 0              	CLRF	r0x04
00062e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000630   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
000632   fff6
000634   c003     movff	0x3, 0xff7         	MOVFF	r0x03, TBLPTRH
000636   fff7
000638   c004     movff	0x4, 0xff8         	MOVFF	r0x04, TBLPTRU
00063a   fff8
00063c   0009     tblrd	*+                 	TBLRD*+	
00063e   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
000640   f002
000642   8002     bsf	0x2, 0, 0            	BSF	r0x02, 0
000644   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000646   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000648   ecf4     call	0xde8, 0            	CALL	_output_flipped_digit
00064a   f006
00064c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	101; display.c	output_digit(char_to_digit[d1] | dot1);
00064e   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
000650   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000652   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
000654   6a02     clrf	0x2, 0              	CLRF	r0x02
000656   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000658   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
00065a   6a03     clrf	0x3, 0              	CLRF	r0x03
00065c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00065e   c001     movff	0x1, 0xff6         	MOVFF	r0x01, TBLPTRL
000660   fff6
000662   c002     movff	0x2, 0xff7         	MOVFF	r0x02, TBLPTRH
000664   fff7
000666   c003     movff	0x3, 0xff8         	MOVFF	r0x03, TBLPTRU
000668   fff8
00066a   0009     tblrd	*+                 	TBLRD*+	
00066c   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
00066e   f001
000670   0100     movlb	0                  	BANKSEL	_dot1
000672   51e4     movf	0xe4, 0, 0x1        	MOVF	_dot1, W, B
000674   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
000676   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000678   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00067a   ecb9     call	0x972, 0            	CALL	_output_digit
00067c   f004
00067e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	102; display.c	output_digit(char_to_digit[d0]);
000680   0e4c     movlw	0x4c               	MOVLW	LOW(_char_to_digit)
000682   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000684   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
000686   6a01     clrf	0x1, 0              	CLRF	r0x01
000688   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00068a   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
00068c   6a02     clrf	0x2, 0              	CLRF	r0x02
00068e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000690   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
000692   fff6
000694   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
000696   fff7
000698   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
00069a   fff8
00069c   0009     tblrd	*+                 	TBLRD*+	
00069e   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0006a0   f000
0006a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a6   ecb9     call	0x972, 0            	CALL	_output_digit
0006a8   f004
0006aa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	105; display.c	LATBbits.LATB4 = 1;
0006ac   888a     bsf	0x8a, 0x4, 0         	BSF	_LATBbits, 4
                                           ;	.line	106; display.c	LATBbits.LATB4 = 0;
0006ae   988a     bcf	0x8a, 0x4, 0         	BCF	_LATBbits, 4
0006b0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0006b2   f007
0006b4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0006b6   f006
0006b8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ba   f005
0006bc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006be   f004
0006c0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006c2   f003
0006c4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006c6   f002
0006c8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006ca   f001
0006cc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006ce   f000
0006d0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0006d2   ffd9
0006d4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__output_flipped_digit	code
                                           _output_flipped_digit:
                                           ;	.line	83; display.c	void output_flipped_digit(uint8_t d){
000de8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dea   ffe5
000dec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000dee   ffd9
000df0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000df2   ffe5
000df4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000df6   ffe5
000df8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000dfa   ffe5
000dfc   0e02     movlw	0x2                	MOVLW	0x02
000dfe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e00   f000
                                           ;	.line	85; display.c	((d & b(00011100)) << 3) |
000e02   0e1c     movlw	0x1c               	MOVLW	0x1c
000e04   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
000e06   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e08   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000e0a   0b3e     andlw	0x3e               	ANDLW	0x3e
000e0c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e0e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000e10   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
                                           ;	.line	86; display.c	((d & b(11100000)) >> 3) |
000e12   0ee0     movlw	0xe0               	MOVLW	0xe0
000e14   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
000e16   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e18   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000e1a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e1c   4401     rlncf	0x1, 0, 0          	RLNCF	r0x01, W
000e1e   0b1f     andlw	0x1f               	ANDLW	0x1f
000e20   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
                                           ;	.line	87; display.c	((d & b(00000011))));
000e22   0e03     movlw	0x3                	MOVLW	0x03
000e24   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000e26   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e28   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000e2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e2e   ecb9     call	0x972, 0            	CALL	_output_digit
000e30   f004
000e32   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e34   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e36   f002
000e38   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e3a   f001
000e3c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e3e   f000
000e40   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e42   ffd9
000e44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__output_digit	code
                                           _output_digit:
                                           ;	.line	68; display.c	void output_digit(uint8_t d){
000972   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000974   ffe5
000976   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000978   ffd9
00097a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00097c   ffe5
00097e   0e02     movlw	0x2                	MOVLW	0x02
000980   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000982   f000
                                           ;	.line	71; display.c	w.b = d;
000984   5000     movf	0, 0, 0             	MOVF	r0x00, W
000986   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
000988   6fed     movwf	0xed, 0x1          	MOVWF	_output_digit_w_1_1, B
                                           ;	.line	73; display.c	output_digit_bit(0);
00098a   a1ed     btfss	0xed, 0, 0x1       	BTFSS	_output_digit_w_1_1, 0, B
00098c   d002     bra	0x992                	BRA	_00110_DS_
00098e   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000990   d001     bra	0x994                	BRA	_00111_DS_
                                           _00110_DS_:
000992   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00111_DS_:
000994   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000996   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000998   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	74; display.c	output_digit_bit(1);
00099a   a3ed     btfss	0xed, 0x1, 0x1     	BTFSS	_output_digit_w_1_1, 1, B
00099c   d002     bra	0x9a2                	BRA	_00113_DS_
00099e   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009a0   d001     bra	0x9a4                	BRA	_00114_DS_
                                           _00113_DS_:
0009a2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00114_DS_:
0009a4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009a6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009a8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	75; display.c	output_digit_bit(2);
0009aa   a5ed     btfss	0xed, 0x2, 0x1     	BTFSS	_output_digit_w_1_1, 2, B
0009ac   d002     bra	0x9b2                	BRA	_00116_DS_
0009ae   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009b0   d001     bra	0x9b4                	BRA	_00117_DS_
                                           _00116_DS_:
0009b2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00117_DS_:
0009b4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009b6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009b8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	76; display.c	output_digit_bit(3);
0009ba   a7ed     btfss	0xed, 0x3, 0x1     	BTFSS	_output_digit_w_1_1, 3, B
0009bc   d002     bra	0x9c2                	BRA	_00119_DS_
0009be   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009c0   d001     bra	0x9c4                	BRA	_00120_DS_
                                           _00119_DS_:
0009c2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00120_DS_:
0009c4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009c6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009c8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	77; display.c	output_digit_bit(4);
0009ca   a9ed     btfss	0xed, 0x4, 0x1     	BTFSS	_output_digit_w_1_1, 4, B
0009cc   d002     bra	0x9d2                	BRA	_00122_DS_
0009ce   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009d0   d001     bra	0x9d4                	BRA	_00123_DS_
                                           _00122_DS_:
0009d2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00123_DS_:
0009d4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009d6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009d8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	78; display.c	output_digit_bit(5);
0009da   abed     btfss	0xed, 0x5, 0x1     	BTFSS	_output_digit_w_1_1, 5, B
0009dc   d002     bra	0x9e2                	BRA	_00125_DS_
0009de   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009e0   d001     bra	0x9e4                	BRA	_00126_DS_
                                           _00125_DS_:
0009e2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00126_DS_:
0009e4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009e6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009e8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	79; display.c	output_digit_bit(6);
0009ea   aded     btfss	0xed, 0x6, 0x1     	BTFSS	_output_digit_w_1_1, 6, B
0009ec   d002     bra	0x9f2                	BRA	_00128_DS_
0009ee   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
0009f0   d001     bra	0x9f4                	BRA	_00129_DS_
                                           _00128_DS_:
0009f2   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00129_DS_:
0009f4   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
0009f6   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
0009f8   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	80; display.c	output_digit_bit(7);
0009fa   afed     btfss	0xed, 0x7, 0x1     	BTFSS	_output_digit_w_1_1, 7, B
0009fc   d002     bra	0xa02                	BRA	_00131_DS_
0009fe   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a00   d001     bra	0xa04                	BRA	_00132_DS_
                                           _00131_DS_:
000a02   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00132_DS_:
000a04   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a06   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a08   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a0a   f000
000a0c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000a0e   ffd9
000a10   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__init_display	code
                                           _init_display:
                                           ;	.line	47; display.c	TRISAbits.TRISA1 = 1;
00100e   8292     bsf	0x92, 0x1, 0         	BSF	_TRISAbits, 1
                                           ;	.line	48; display.c	TRISAbits.TRISA2 = 0;
001010   9492     bcf	0x92, 0x2, 0         	BCF	_TRISAbits, 2
                                           ;	.line	49; display.c	TRISAbits.TRISA3 = 0;
001012   9692     bcf	0x92, 0x3, 0         	BCF	_TRISAbits, 3
                                           ;	.line	51; display.c	TRISBbits.TRISB3 = 0;
001014   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	52; display.c	TRISBbits.TRISB4 = 0;
001016   9893     bcf	0x93, 0x4, 0         	BCF	_TRISBbits, 4
                                           ;	.line	55; display.c	display_digits(8,8,8,8,8,8);
001018   0e08     movlw	0x8                	MOVLW	0x08
00101a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001020   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001024   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001026   eca5     call	0x54a, 0            	CALL	_display_digits_real
001028   f002
00102a   0e06     movlw	0x6                	MOVLW	0x06
00102c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00102e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _char_to_digit:
000b4c   60fc     cpfslt	0xfc, 0           	DB	0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe0, 0xfe, 0xe6, 0xee, 0x3e
000b4e   f2da     dw	0xf2da  ;unknown opcode 
000b50   b666     btfsc	0x66, 0x3, 0       
000b52   e0be     bz	0xad0                 
000b54   e6fe     bn	0xb52                 
000b56   3eee     incfsz	0xee, 0x1, 0      
000b58   7a9c     btg	0x9c, 0x5, 0         	DB	0x9c, 0x7a, 0x9e, 0x8e, 0x00, 0x01
000b5a   8e9e     bsf	0x9e, 0x7, 0         
000b5c   0100     movlb	0                  
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  690 (0x02b2) bytes ( 0.53%)
                                           ;           	  345 (0x0159) words
                                           ; udata size:	    1 (0x0001) bytes ( 1.56%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:37 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_ds3231
                                           	global _from_bcd
                                           	global _to_bcd
                                           	global _read_time_from_ds3231
                                           	global _write_time_to_ds3231
                                           	global _read_from_ds3231
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_i2c
                                           	extern _i2c_reset
                                           	extern _i2c_start
                                           	extern _i2c_stop
                                           	extern _i2c_write
                                           	extern _i2c_read
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ds3231__write_time_to_ds3231	code
                                           _write_time_to_ds3231:
                                           ;	.line	63; ds3231.c	void write_time_to_ds3231(uint8_t addr){
000ab2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ab4   ffe5
000ab6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ab8   ffd9
000aba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000abc   ffe5
000abe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ac0   ffe5
000ac2   0e02     movlw	0x2                	MOVLW	0x02
000ac4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000ac6   f000
                                           ;	.line	64; ds3231.c	i2c_reset();
000ac8   ec80     call	0x1100, 0           	CALL	_i2c_reset
000aca   f008
                                           ;	.line	65; ds3231.c	i2c_start();
000acc   ec9b     call	0x1136, 0           	CALL	_i2c_start
000ace   f008
                                           ;	.line	66; ds3231.c	i2c_write(slave_addr_write);
000ad0   0ed0     movlw	0xd0               	MOVLW	0xd0
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   eca6     call	0xf4c, 0            	CALL	_i2c_write
000ad6   f007
000ad8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	67; ds3231.c	i2c_write(addr);
000ada   5000     movf	0, 0, 0             	MOVF	r0x00, W
000adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ade   eca6     call	0xf4c, 0            	CALL	_i2c_write
000ae0   f007
000ae2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	68; ds3231.c	if (addr == ds3231_write_secs)
000ae4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ae6   e10f     bnz	0xb06                	BNZ	_00131_DS_
                                           ;	.line	69; ds3231.c	i2c_write(to_bcd(time_secs / secs_to_real_secs_divider));
000ae8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000aea   0100     movlb	0                  	BANKSEL	_time_secs
000aec   31f0     rrcf	0xf0, 0, 0x1        	RRCF	_time_secs, W, B
000aee   6e01     movwf	0x1, 0             	MOVWF	r0x01
000af0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000af2   3201     rrcf	0x1, 0x1, 0         	RRCF	r0x01, F
000af4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af8   ec91     call	0xd22, 0            	CALL	_to_bcd
000afa   f006
000afc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000afe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b00   eca6     call	0xf4c, 0            	CALL	_i2c_write
000b02   f007
000b04   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	70; ds3231.c	if (addr == ds3231_write_mins)
000b06   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b08   0a01     xorlw	0x1                	XORLW	0x01
000b0a   e10a     bnz	0xb20                	BNZ	_00133_DS_
                                           _00142_DS_:
000b0c   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	71; ds3231.c	i2c_write(to_bcd(time_mins));
000b0e   51ef     movf	0xef, 0, 0x1        	MOVF	_time_mins, W, B
000b10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b12   ec91     call	0xd22, 0            	CALL	_to_bcd
000b14   f006
000b16   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1a   eca6     call	0xf4c, 0            	CALL	_i2c_write
000b1c   f007
000b1e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00133_DS_:
                                           ;	.line	72; ds3231.c	if (addr == ds3231_write_hours)
000b20   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b22   0a02     xorlw	0x2                	XORLW	0x02
000b24   e10a     bnz	0xb3a                	BNZ	_00135_DS_
                                           _00144_DS_:
000b26   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	73; ds3231.c	i2c_write(to_bcd(time_hours));
000b28   51ee     movf	0xee, 0, 0x1        	MOVF	_time_hours, W, B
000b2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b2c   ec91     call	0xd22, 0            	CALL	_to_bcd
000b2e   f006
000b30   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b34   eca6     call	0xf4c, 0            	CALL	_i2c_write
000b36   f007
000b38   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00135_DS_:
                                           ;	.line	74; ds3231.c	i2c_stop();
000b3a   eca9     call	0x1152, 0           	CALL	_i2c_stop
000b3c   f008
000b3e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b40   f001
000b42   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b44   f000
000b46   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000b48   ffd9
000b4a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_time_from_ds3231	code
                                           _read_time_from_ds3231:
                                           ;	.line	54; ds3231.c	void read_time_from_ds3231(){
0007e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0007e6   ffe5
0007e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0007ea   ffe5
                                           ;	.line	55; ds3231.c	time_secs = from_bcd(read_from_ds3231(ds3231_write_secs)) * secs_to_real_secs_divider;
0007ec   0e00     movlw	0                  	MOVLW	0x00
0007ee   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0007f0   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
0007f2   f007
0007f4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0007f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007f8   ecce     call	0xf9c, 0            	CALL	_from_bcd
0007fa   f007
0007fc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable r0x00 and store in _time_secs
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0007fe   0d04     mullw	0x4                	MULLW	0x04
000800   cff3     movff	0xff3, 0xf0        	MOVFF	PRODL, _time_secs
000802   f0f0
                                           ;	.line	56; ds3231.c	time_mins = from_bcd(read_from_ds3231(ds3231_write_mins));
000804   0e01     movlw	0x1                	MOVLW	0x01
000806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000808   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
00080a   f007
00080c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00080e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000810   ecce     call	0xf9c, 0            	CALL	_from_bcd
000812   f007
000814   0100     movlb	0                  	BANKSEL	_time_mins
000816   6fef     movwf	0xef, 0x1          	MOVWF	_time_mins, B
000818   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	57; ds3231.c	time_hours = from_bcd(read_from_ds3231(ds3231_write_hours));
00081a   0e02     movlw	0x2                	MOVLW	0x02
00081c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00081e   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
000820   f007
000822   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000824   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000826   ecce     call	0xf9c, 0            	CALL	_from_bcd
000828   f007
00082a   0100     movlb	0                  	BANKSEL	_time_hours
00082c   6fee     movwf	0xee, 0x1          	MOVWF	_time_hours, B
00082e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	60; ds3231.c	new_temp_sample(read_from_ds3231(0x11));
000830   0e11     movlw	0x11               	MOVLW	0x11
000832   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000834   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
000836   f007
000838   6e00     movwf	0, 0               	MOVWF	r0x00
00083a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00083c   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
00083e   51d0     movf	0xd0, 0, 0x1        	MOVF	(_eeprom_data + 16), W, B
000840   0f80     addlw	0x80               	ADDLW	0x80
000842   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
000844   5000     movf	0, 0, 0             	MOVF	r0x00, W
000846   0f80     addlw	0x80               	ADDLW	0x80
000848   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
00084a   e20e     bc	0x868                 	BC	_00122_DS_
00084c   0e11     movlw	0x11               	MOVLW	0x11
00084e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000850   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
000852   f007
000854   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000856   6a01     clrf	0x1, 0              	CLRF	r0x01
000858   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
00085a   6fd0     movwf	0xd0, 0x1          	MOVWF	(_eeprom_data + 16), B
00085c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00085e   6bd1     clrf	0xd1, 0x1           	CLRF	(_eeprom_data + 17), B
                                           ; removed redundant BANKSEL
000860   6bd2     clrf	0xd2, 0x1           	CLRF	(_eeprom_data + 18), B
                                           ; removed redundant BANKSEL
000862   6bd3     clrf	0xd3, 0x1           	CLRF	(_eeprom_data + 19), B
000864   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
000866   f008
                                           _00122_DS_:
000868   0e11     movlw	0x11               	MOVLW	0x11
00086a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086c   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
00086e   f007
000870   6e00     movwf	0, 0               	MOVWF	r0x00
000872   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000874   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
000876   51d4     movf	0xd4, 0, 0x1        	MOVF	(_eeprom_data + 20), W, B
000878   6e01     movwf	0x1, 0             	MOVWF	r0x01
00087a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00087c   0f80     addlw	0x80               	ADDLW	0x80
00087e   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
000880   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000882   0f80     addlw	0x80               	ADDLW	0x80
000884   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
000886   e20e     bc	0x8a4                 	BC	_00125_DS_
000888   0e11     movlw	0x11               	MOVLW	0x11
00088a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088c   ec23     call	0xe46, 0            	CALL	_read_from_ds3231
00088e   f007
000890   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000892   6a01     clrf	0x1, 0              	CLRF	r0x01
000894   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
000896   6fd4     movwf	0xd4, 0x1          	MOVWF	(_eeprom_data + 20), B
000898   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00089a   6bd5     clrf	0xd5, 0x1           	CLRF	(_eeprom_data + 21), B
                                           ; removed redundant BANKSEL
00089c   6bd6     clrf	0xd6, 0x1           	CLRF	(_eeprom_data + 22), B
                                           ; removed redundant BANKSEL
00089e   6bd7     clrf	0xd7, 0x1           	CLRF	(_eeprom_data + 23), B
0008a0   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
0008a2   f008
                                           _00125_DS_:
0008a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008a6   f001
0008a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008aa   f000
0008ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_from_ds3231	code
                                           _read_from_ds3231:
                                           ;	.line	41; ds3231.c	uint8_t read_from_ds3231(uint8_t addr){
000e46   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e48   ffe5
000e4a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e4c   ffd9
000e4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e50   ffe5
000e52   0e02     movlw	0x2                	MOVLW	0x02
000e54   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e56   f000
                                           ;	.line	43; ds3231.c	i2c_reset();
000e58   ec80     call	0x1100, 0           	CALL	_i2c_reset
000e5a   f008
                                           ;	.line	44; ds3231.c	i2c_start();
000e5c   ec9b     call	0x1136, 0           	CALL	_i2c_start
000e5e   f008
                                           ;	.line	45; ds3231.c	i2c_write(slave_addr_write);
000e60   0ed0     movlw	0xd0               	MOVLW	0xd0
000e62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e64   eca6     call	0xf4c, 0            	CALL	_i2c_write
000e66   f007
000e68   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	46; ds3231.c	i2c_write(addr);
000e6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e6e   eca6     call	0xf4c, 0            	CALL	_i2c_write
000e70   f007
000e72   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	47; ds3231.c	i2c_start();
000e74   ec9b     call	0x1136, 0           	CALL	_i2c_start
000e76   f008
                                           ;	.line	48; ds3231.c	i2c_write(slave_addr_read);
000e78   0ed1     movlw	0xd1               	MOVLW	0xd1
000e7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7c   eca6     call	0xf4c, 0            	CALL	_i2c_write
000e7e   f007
000e80   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	49; ds3231.c	r = i2c_read(true);
000e82   0e01     movlw	0x1                	MOVLW	0x01
000e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e86   ecc4     call	0xd88, 0            	CALL	_i2c_read
000e88   f006
000e8a   6e00     movwf	0, 0               	MOVWF	r0x00
000e8c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	50; ds3231.c	i2c_stop();
000e8e   eca9     call	0x1152, 0           	CALL	_i2c_stop
000e90   f008
                                           ;	.line	51; ds3231.c	return r;
000e92   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e96   f000
000e98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e9a   ffd9
000e9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__to_bcd	code
                                           _to_bcd:
                                           ;	.line	37; ds3231.c	uint8_t to_bcd(uint8_t d){
000d22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d24   ffe5
000d26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d28   ffd9
000d2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d2c   ffe5
000d2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d30   ffe5
000d32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d34   ffe5
000d36   0e02     movlw	0x2                	MOVLW	0x02
000d38   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d3a   f000
                                           ;	.line	38; ds3231.c	return (((d / 10) << 4) & b(11110000)) | ((d % 10) & b(00001111));
000d3c   0e0a     movlw	0xa                	MOVLW	0x0a
000d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d40   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d42   ffe5
000d44   ec5a     call	0xcb4, 0            	CALL	__divuchar
000d46   f006
000d48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d4a   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d4c   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d4e   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000d50   0bf0     andlw	0xf0               	ANDLW	0xf0
000d52   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d54   0ef0     movlw	0xf0               	MOVLW	0xf0
000d56   1402     andwf	0x2, 0, 0          	ANDWF	r0x02, W
000d58   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5a   0e0a     movlw	0xa                	MOVLW	0x0a
000d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d5e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d60   ffe5
000d62   ece7     call	0xbce, 0            	CALL	__moduchar
000d64   f005
000d66   6e00     movwf	0, 0               	MOVWF	r0x00
000d68   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d6a   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d6c   0e0f     movlw	0xf                	MOVLW	0x0f
000d6e   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000d70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d72   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
000d74   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d76   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d78   f002
000d7a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d7c   f001
000d7e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d80   f000
000d82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d84   ffd9
000d86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__from_bcd	code
                                           _from_bcd:
                                           ;	.line	33; ds3231.c	uint8_t from_bcd(uint8_t d){
000f9c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f9e   ffe5
000fa0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fa2   ffd9
000fa4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fa6   ffe5
000fa8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000faa   ffe5
000fac   0e02     movlw	0x2                	MOVLW	0x02
000fae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fb0   f000
                                           ;	.line	34; ds3231.c	return (d & b(00001111)) + (((d & b(11110000)) >> 4) * 10);
000fb2   0e0f     movlw	0xf                	MOVLW	0x0f
000fb4   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
000fb6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000fb8   0ef0     movlw	0xf0               	MOVLW	0xf0
000fba   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000fbc   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
000fbe   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x0a by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000fc0   0d0a     mullw	0xa                	MULLW	0x0a
000fc2   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000fc4   f000
000fc6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fc8   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000fca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fcc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fce   f001
000fd0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fd2   f000
000fd4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000fd6   ffd9
000fd8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__init_ds3231	code
                                           _init_ds3231:
                                           ;	.line	30; ds3231.c	init_i2c();
001162   eca0     call	0x1140, 0           	CALL	_init_i2c
001164   f008
001166   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  614 (0x0266) bytes ( 0.47%)
                                           ;           	  307 (0x0133) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:38 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_eeprom
                                           	global _save_eeprom_if_needed
                                           	global _trigger_save_eeprom
                                           	global _save_eeprom_fully
                                           	global _eeprom_data
                                           	global _incremental_save_counter
                                           	global _do_eeprom_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _incremental_save_counter	db	0x24
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_eeprom_0	udata
                                           _eeprom_data	res	36
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_fully	code
                                           _save_eeprom_fully:
0010b4   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	74; eeprom.c	incremental_save_counter = 0;
0010b6   6be5     clrf	0xe5, 0x1           	CLRF	_incremental_save_counter, B
                                           _00130_DS_:
                                           ;	.line	75; eeprom.c	while (incremental_save_counter < sizeof(eeprom_data)){
0010b8   0e24     movlw	0x24               	MOVLW	0x24
0010ba   0100     movlb	0                  	BANKSEL	_incremental_save_counter
0010bc   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
0010be   e203     bc	0x10c6                	BC	_00133_DS_
                                           ;	.line	76; eeprom.c	save_eeprom_if_needed();
0010c0   ec21     call	0xc42, 0            	CALL	_save_eeprom_if_needed
0010c2   f006
0010c4   d7f9     bra	0x10b8               	BRA	_00130_DS_
                                           _00133_DS_:
0010c6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__trigger_save_eeprom	code
                                           _trigger_save_eeprom:
001168   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	70; eeprom.c	incremental_save_counter = 0;
00116a   6be5     clrf	0xe5, 0x1           	CLRF	_incremental_save_counter, B
00116c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_if_needed	code
                                           _save_eeprom_if_needed:
                                           ;	.line	45; eeprom.c	void save_eeprom_if_needed(){
000c42   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c44   ffe5
000c46   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c48   ffd9
000c4a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c4c   ffe5
000c4e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c50   ffe5
000c52   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c54   ffe5
                                           ;	.line	46; eeprom.c	if ((incremental_save_counter < sizeof(eeprom_data))
000c56   0e24     movlw	0x24               	MOVLW	0x24
000c58   0100     movlb	0                  	BANKSEL	_incremental_save_counter
000c5a   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
000c5c   e222     bc	0xca2                 	BC	_00121_DS_
                                           ;	.line	47; eeprom.c	&& !EECON1bits.WR){ // Is previous write complete?
000c5e   b2a6     btfsc	0xa6, 0x1, 0       	BTFSC	_EECON1bits, 1
000c60   d020     bra	0xca2                	BRA	_00121_DS_
                                           ;	.line	48; eeprom.c	EEADR = incremental_save_counter;
000c62   c0e5     movff	0xe5, 0xfa9        	MOVFF	_incremental_save_counter, _EEADR
000c64   ffa9
                                           ;	.line	50; eeprom.c	EEDATA = ((uint8_t *)(&eeprom_data))[EEADR];
000c66   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000c68   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c6a   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000c6c   6e00     movwf	0, 0               	MOVWF	r0x00
000c6e   0e80     movlw	0x80               	MOVLW	0x80
000c70   6e02     movwf	0x2, 0             	MOVWF	r0x02
000c72   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000c74   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000c76   6ae8     clrf	0xe8, 0             	CLRF	WREG
000c78   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000c7a   6ae8     clrf	0xe8, 0             	CLRF	WREG
000c7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c7e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000c80   ffe9
000c82   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000c84   fff3
000c86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c88   ec18     call	0x1030, 0           	CALL	__gptrget1
000c8a   f008
000c8c   6ea8     movwf	0xa8, 0            	MOVWF	_EEDATA
                                           ;	.line	52; eeprom.c	EECON1bits.EEPGD = 0;
000c8e   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	53; eeprom.c	EECON1bits.CFGS = 0;
000c90   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	54; eeprom.c	EECON1bits.WREN = 1;
000c92   84a6     bsf	0xa6, 0x2, 0         	BSF	_EECON1bits, 2
000c94   0e55     movlw	0x55               	movlw 0x55
000c96   6ea7     movwf	0xa7, 0            	movwf _EECON2
000c98   0eaa     movlw	0xaa               	movlw 0xAA
000c9a   6ea7     movwf	0xa7, 0            	movwf _EECON2
000c9c   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1,1
                                           	
000c9e   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	65; eeprom.c	incremental_save_counter++;
000ca0   2be5     incf	0xe5, 0x1, 0x1      	INCF	_incremental_save_counter, F, B
                                           _00121_DS_:
000ca2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ca4   f002
000ca6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ca8   f001
000caa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cac   f000
000cae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cb0   ffd9
000cb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__init_eeprom	code
                                           _init_eeprom:
                                           ;	.line	34; eeprom.c	void init_eeprom(){
000ef6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ef8   ffe5
000efa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000efc   ffe5
000efe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f00   ffe5
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f02   6aa9     clrf	0xa9, 0             	CLRF	_EEADR
                                           _00109_DS_:
000f04   0e24     movlw	0x24               	MOVLW	0x24
000f06   5ca9     subwf	0xa9, 0, 0         	SUBWF	_EEADR, W
000f08   e21a     bc	0xf3e                 	BC	_00113_DS_
                                           ;	.line	36; eeprom.c	EECON1bits.EEPGD = 0;
000f0a   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	37; eeprom.c	EECON1bits.CFGS = 0;
000f0c   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	38; eeprom.c	EECON1bits.RD = 1;
000f0e   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
                                           ;	.line	39; eeprom.c	((uint8_t *)(&eeprom_data))[EEADR] = EEDATA;
000f10   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000f12   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f14   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000f16   6e00     movwf	0, 0               	MOVWF	r0x00
000f18   0e80     movlw	0x80               	MOVLW	0x80
000f1a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f1c   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000f1e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f20   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f22   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f24   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f26   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f28   cfa8     movff	0xfa8, 0xfe5       	MOVFF	_EEDATA, POSTDEC1
000f2a   ffe5
000f2c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f2e   ffe9
000f30   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f32   fff3
000f34   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f36   ec6e     call	0x10dc, 0           	CALL	__gptrput1
000f38   f008
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f3a   2aa9     incf	0xa9, 0x1, 0        	INCF	_EEADR, F
000f3c   d7e3     bra	0xf04                	BRA	_00109_DS_
                                           _00113_DS_:
000f3e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f40   f002
000f42   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f44   f001
000f46   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f48   f000
000f4a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__do_eeprom_read	code
                                           _do_eeprom_read:
                                           ;	.line	29; eeprom.c	EECON1bits.EEPGD = 0;
00114a   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	30; eeprom.c	EECON1bits.CFGS = 0;
00114c   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	31; eeprom.c	EECON1bits.RD = 1;
00114e   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
001150   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  236 (0x00ec) bytes ( 0.18%)
                                           ;           	  118 (0x0076) words
                                           ; udata size:	   36 (0x0024) bytes (56.25%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:38 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_i2c
                                           	global _i2c_reset
                                           	global _i2c_start
                                           	global _i2c_stop
                                           	global _i2c_write
                                           	global _i2c_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_i2c__i2c_read	code
                                           _i2c_read:
                                           ;	.line	89; i2c.c	uint8_t i2c_read(bool ack){
000d88   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d8a   ffe5
000d8c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d8e   ffd9
000d90   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d92   ffe5
000d94   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d96   ffe5
000d98   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d9a   ffe5
000d9c   0e02     movlw	0x2                	MOVLW	0x02
000d9e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000da0   f000
                                           ;	.line	90; i2c.c	uint8_t i, d = 0;
000da2   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	91; i2c.c	i2c_sda = 1; 
000da4   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000da6   0e08     movlw	0x8                	MOVLW	0x08
000da8   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00151_DS_:
000daa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dac   e00b     bz	0xdc4                 	BZ	_00154_DS_
                                           ;	.line	94; i2c.c	d <<= 1;
000dae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000db0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           _00143_DS_:
                                           ;	.line	96; i2c.c	i2c_scl = 1;
000db2   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	98; i2c.c	while(i2c_scl_in == 0); // wait for any i2c_scl clock stretching to complete
000db4   a081     btfss	0x81, 0, 0         	BTFSS	_PORTBbits, 0
000db6   d7fd     bra	0xdb2                	BRA	_00143_DS_
                                           ;	.line	100; i2c.c	if (i2c_sda_in)
000db8   a281     btfss	0x81, 0x1, 0       	BTFSS	_PORTBbits, 1
000dba   d001     bra	0xdbe                	BRA	_00147_DS_
                                           ;	.line	101; i2c.c	d |= 1;
000dbc   8001     bsf	0x1, 0, 0            	BSF	r0x01, 0
                                           _00147_DS_:
                                           ;	.line	102; i2c.c	i2c_scl = 0;
000dbe   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000dc0   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
000dc2   d7f3     bra	0xdaa                	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	105; i2c.c	if (ack)
000dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dc6   e002     bz	0xdcc                 	BZ	_00149_DS_
                                           ;	.line	106; i2c.c	i2c_sda = 0;
000dc8   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
000dca   d001     bra	0xdce                	BRA	_00150_DS_
                                           _00149_DS_:
                                           ;	.line	108; i2c.c	i2c_sda = 1;
000dcc   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           _00150_DS_:
                                           ;	.line	111; i2c.c	i2c_scl = 1;
000dce   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	113; i2c.c	i2c_scl = 0;
000dd0   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	115; i2c.c	i2c_sda = 1;
000dd2   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	117; i2c.c	return d;
000dd4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dd6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000dd8   f002
000dda   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ddc   f001
000dde   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de0   f000
000de2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000de4   ffd9
000de6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_write	code
                                           _i2c_write:
                                           ;	.line	59; i2c.c	bool i2c_write(uint8_t d){
000f4c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f4e   ffe5
000f50   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f52   ffd9
000f54   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f56   ffe5
000f58   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f5a   ffe5
000f5c   0e02     movlw	0x2                	MOVLW	0x02
000f5e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000f60   f000
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
000f62   0e08     movlw	0x8                	MOVLW	0x08
000f64   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00128_DS_:
000f66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f68   e00b     bz	0xf80                 	BZ	_00131_DS_
                                           ;	.line	64; i2c.c	if(d & b(10000000))
000f6a   ae00     btfss	0, 0x7, 0          	BTFSS	r0x00, 7
000f6c   d002     bra	0xf72                	BRA	_00126_DS_
                                           ;	.line	65; i2c.c	i2c_sda = 1;
000f6e   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
000f70   d001     bra	0xf74                	BRA	_00127_DS_
                                           _00126_DS_:
                                           ;	.line	67; i2c.c	i2c_sda = 0;
000f72   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           _00127_DS_:
                                           ;	.line	70; i2c.c	i2c_scl = 1;
000f74   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	72; i2c.c	i2c_scl = 0;
000f76   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	74; i2c.c	d <<= 1;
000f78   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f7a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
000f7c   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000f7e   d7f3     bra	0xf66                	BRA	_00128_DS_
                                           _00131_DS_:
                                           ;	.line	78; i2c.c	i2c_sda = 1;
000f80   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	80; i2c.c	i2c_scl = 1;
000f82   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	83; i2c.c	b = i2c_sda_in; // possible ACK bit
000f84   6a00     clrf	0, 0                	CLRF	r0x00
000f86   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
000f88   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	84; i2c.c	i2c_scl = 0;
000f8a   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	86; i2c.c	return b;
000f8c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f8e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f90   f001
000f92   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f94   f000
000f96   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f98   ffd9
000f9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_stop	code
                                           _i2c_stop:
                                           ;	.line	51; i2c.c	i2c_sda = 0; 
001152   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	53; i2c.c	i2c_scl = 1;
001154   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	55; i2c.c	i2c_sda = 1;
001156   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
001158   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_start	code
                                           _i2c_start:
                                           ;	.line	40; i2c.c	i2c_sda = 1;
001136   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	42; i2c.c	i2c_scl = 1;
001138   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	44; i2c.c	i2c_sda = 0;
00113a   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	46; i2c.c	i2c_scl = 0;
00113c   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
00113e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_reset	code
                                           _i2c_reset:
                                           ;	.line	30; i2c.c	i2c_sda = 1;
001100   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           _00109_DS_:
                                           ;	.line	31; i2c.c	while (!i2c_sda_in){
001102   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
001104   d003     bra	0x110c               	BRA	_00112_DS_
                                           ;	.line	32; i2c.c	i2c_scl = 0;
001106   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	34; i2c.c	i2c_scl = 1;
001108   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
00110a   d7fb     bra	0x1102               	BRA	_00109_DS_
                                           _00112_DS_:
00110c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__init_i2c	code
                                           _init_i2c:
                                           ;	.line	24; i2c.c	LATBbits.LATB0 = 0;
001140   908a     bcf	0x8a, 0, 0           	BCF	_LATBbits, 0
                                           ;	.line	25; i2c.c	LATBbits.LATB1 = 0;
001142   928a     bcf	0x8a, 0x1, 0         	BCF	_LATBbits, 1
                                           ;	.line	26; i2c.c	i2c_stop();
001144   eca9     call	0x1152, 0           	CALL	_i2c_stop
001146   f008
001148   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  218 (0x00da) bytes ( 0.17%)
                                           ;           	  109 (0x006d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:38 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _main_loop
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _dot1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_loop__main_loop	code
                                           _main_loop:
                                           _00106_DS_:
                                           ;	.line	25; loop.c	while (1){
001172   d7ff     bra	0x1172               	BRA	_00106_DS_
001174   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    4 (0x0004) bytes ( 0.00%)
                                           ;           	    2 (0x0002) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:39 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           	__config 0x300001, 0xf8
                                           	__config 0x300002, 0xf2
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0xff
                                           	__config 0x300006, 0xfa
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global ___ivt_high_int
                                           	global _high_int
                                           	global __tmr0_handler
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _main_loop
                                           	extern _init_time
                                           	extern _do_time
                                           	extern _init_user
                                           	extern _do_user
                                           	extern _init_eeprom
                                           	extern _save_eeprom_if_needed
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ustat_main_00	udata	0X0080
                                           _stack	res	63
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main____ivt_high_int	code	0X000008
                                           ___ivt_high_int:
                                           	
000008   efad     goto	0x115a              	goto _high_int 
00000a   f008
                                           	
                                           ; ; Starting pCode block
                                           S_main__high_int	code
                                           _high_int:
00115a   b4f2     btfsc	0xf2, 0x2, 0       	btfsc _INTCON, 2 
00115c   ef4f     goto	0xe9e               	goto __tmr0_handler
00115e   f007
001160   0010     retfie	0                 	retfie 
                                           	
                                           ; ; Starting pCode block
                                           S_main___tmr0_handler	code
                                           __tmr0_handler:
                                           ;	.line	53; main.c	SIGHANDLER(_tmr0_handler)
000e9e   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000ea0   ffe5
000ea2   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000ea4   ffe5
000ea6   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000ea8   ffe5
000eaa   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000eac   ffe5
000eae   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000eb0   ffe5
000eb2   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000eb4   ffe5
000eb6   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000eb8   ffe5
000eba   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000ebc   ffe5
000ebe   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000ec0   ffe5
                                           ;	.line	56; main.c	do_time();
000ec2   ec57     call	0x8ae, 0            	CALL	_do_time
000ec4   f004
                                           ;	.line	57; main.c	do_user();
000ec6   ec87     call	0x110e, 0           	CALL	_do_user
000ec8   f008
                                           ;	.line	59; main.c	save_eeprom_if_needed();
000eca   ec21     call	0xc42, 0            	CALL	_save_eeprom_if_needed
000ecc   f006
                                           ;	.line	62; main.c	INTCONbits.T0IF = 0;
000ece   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
000ed0   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000ed2   fffb
000ed4   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000ed6   fffa
000ed8   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000eda   ffea
000edc   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000ede   ffe9
000ee0   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000ee2   fff4
000ee4   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000ee6   fff3
000ee8   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000eea   ffe0
000eec   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000eee   ffd8
000ef0   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000ef2   ffe8
000ef4   0010     retfie	0                 	RETFIE	
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	67; main.c	OSCCON = b(01000000);
000fda   0e40     movlw	0x40               	MOVLW	0x40
000fdc   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           ;	.line	74; main.c	TRISA = 0x00;
000fde   6a92     clrf	0x92, 0             	CLRF	_TRISA
                                           ;	.line	75; main.c	TRISB = 0x00;
000fe0   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           ;	.line	78; main.c	ADCON1 = 0x7F;
000fe2   0e7f     movlw	0x7f               	MOVLW	0x7f
000fe4   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	81; main.c	init_eeprom();
000fe6   ec7b     call	0xef6, 0            	CALL	_init_eeprom
000fe8   f007
                                           ;	.line	82; main.c	init_time();
000fea   ec78     call	0x10f0, 0           	CALL	_init_time
000fec   f008
                                           ;	.line	83; main.c	init_user();
000fee   ec15     call	0x2a, 0             	CALL	_init_user
000ff0   f000
                                           ;	.line	86; main.c	init_eeprom();
000ff2   ec7b     call	0xef6, 0            	CALL	_init_eeprom
000ff4   f007
                                           ;	.line	87; main.c	init_time();
000ff6   ec78     call	0x10f0, 0           	CALL	_init_time
000ff8   f008
                                           ;	.line	88; main.c	init_user();
000ffa   ec15     call	0x2a, 0             	CALL	_init_user
000ffc   f000
                                           ;	.line	91; main.c	INTCONbits.T0IF = 0;
000ffe   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	92; main.c	INTCONbits.T0IE = 1;
001000   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	93; main.c	INTCONbits.GIE = 1;
001002   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	94; main.c	T0CON = b(11100000); 
001004   0ee0     movlw	0xe0               	MOVLW	0xe0
001006   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	97; main.c	main_loop();
001008   ecb9     call	0x1172, 0           	CALL	_main_loop
00100a   f008
00100c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  154 (0x009a) bytes ( 0.12%)
                                           ;           	   77 (0x004d) words
                                           ; udata size:	   64 (0x0040) bytes (100.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:39 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:39 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_time
                                           	global _inc_hours
                                           	global _dec_hours
                                           	global _inc_mins
                                           	global _clear_secs
                                           	global _do_time
                                           	global _time_tics
                                           	global _time_secs
                                           	global _time_mins
                                           	global _time_hours
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay100ktcy
                                           	extern _init_ds3231
                                           	extern _read_time_from_ds3231
                                           	extern _write_time_to_ds3231
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_time_0	udata
                                           _time_hours	res	1
                                           
                                           udata_time_1	udata
                                           _time_mins	res	1
                                           
                                           udata_time_2	udata
                                           _time_secs	res	1
                                           
                                           udata_time_3	udata
                                           _time_tics	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__do_time	code
                                           _do_time:
                                           ;	.line	73; time.c	void do_time(){
0008ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0008b0   ffe5
0008b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0008b4   ffe5
0008b6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0008b8   ffe5
0008ba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0008bc   ffe5
0008be   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	75; time.c	time_tics++;
0008c0   2bf1     incf	0xf1, 0x1, 0x1      	INCF	_time_tics, F, B
                                           ;	.line	77; time.c	if (time_tics == num_time_tics){
0008c2   51f1     movf	0xf1, 0, 0x1        	MOVF	_time_tics, W, B
0008c4   0a10     xorlw	0x10               	XORLW	0x10
0008c6   e001     bz	0x8ca                 	BZ	_00156_DS_
0008c8   d04b     bra	0x960                	BRA	_00146_DS_
                                           _00156_DS_:
0008ca   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	78; time.c	time_tics = 0;
0008cc   6bf1     clrf	0xf1, 0x1           	CLRF	_time_tics, B
0008ce   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	81; time.c	if (!(time_secs % secs_to_real_secs_divider))
0008d0   51f0     movf	0xf0, 0, 0x1        	MOVF	_time_secs, W, B
0008d2   0b03     andlw	0x3                	ANDLW	0x03
0008d4   e118     bnz	0x906                	BNZ	_00132_DS_
                                           ;	.line	82; time.c	inc_metric_running_time();
0008d6   c0c0     movff	0xc0, 0            	MOVFF	_eeprom_data, r0x00
0008d8   f000
0008da   c0c1     movff	0xc1, 0x1          	MOVFF	(_eeprom_data + 1), r0x01
0008dc   f001
0008de   c0c2     movff	0xc2, 0x2          	MOVFF	(_eeprom_data + 2), r0x02
0008e0   f002
0008e2   c0c3     movff	0xc3, 0x3          	MOVFF	(_eeprom_data + 3), r0x03
0008e4   f003
0008e6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0008e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008ea   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0008ec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008ee   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0008f0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008f2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0008f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008f6   0100     movlb	0                  	BANKSEL	_eeprom_data
0008f8   6fc0     movwf	0xc0, 0x1          	MOVWF	_eeprom_data, B
0008fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0008fc   6fc1     movwf	0xc1, 0x1          	MOVWF	(_eeprom_data + 1), B
0008fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000900   6fc2     movwf	0xc2, 0x1          	MOVWF	(_eeprom_data + 2), B
000902   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000904   6fc3     movwf	0xc3, 0x1          	MOVWF	(_eeprom_data + 3), B
                                           _00132_DS_:
000906   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	84; time.c	time_secs++;
000908   2bf0     incf	0xf0, 0x1, 0x1      	INCF	_time_secs, F, B
                                           ;	.line	85; time.c	if (time_secs >= num_time_secs){
00090a   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
00090c   5df0     subwf	0xf0, 0, 0x1       	SUBWF	_time_secs, W, B
00090e   e328     bnc	0x960                	BNC	_00146_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	86; time.c	time_secs = 0;
000910   6bf0     clrf	0xf0, 0x1           	CLRF	_time_secs, B
                                           ;	.line	91; time.c	old_time_hours = time_hours;
000912   c0ee     movff	0xee, 0            	MOVFF	_time_hours, r0x00
000914   f000
                                           ;	.line	92; time.c	old_time_mins = time_mins;
000916   c0ef     movff	0xef, 0x1          	MOVFF	_time_mins, r0x01
000918   f001
                                           ;	.line	93; time.c	old_time_secs = time_secs;
00091a   c0f0     movff	0xf0, 0x2          	MOVFF	_time_secs, r0x02
00091c   f002
                                           ;	.line	94; time.c	read_time_from_ds3231();
00091e   ecf2     call	0x7e4, 0            	CALL	_read_time_from_ds3231
000920   f003
000922   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	98; time.c	if (time_secs){
000924   51f0     movf	0xf0, 0, 0x1        	MOVF	_time_secs, W, B
000926   e008     bz	0x938                 	BZ	_00137_DS_
                                           ;	.line	99; time.c	if (time_secs > num_time_secs / 2){
000928   0e79     movlw	0x79               	MOVLW	0x79
                                           ; removed redundant BANKSEL
00092a   5df0     subwf	0xf0, 0, 0x1       	SUBWF	_time_secs, W, B
00092c   e303     bnc	0x934                	BNC	_00134_DS_
00092e   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	101; time.c	time_tics--;
000930   07f1     decf	0xf1, 0x1, 0x1      	DECF	_time_tics, F, B
000932   d002     bra	0x938                	BRA	_00137_DS_
                                           _00134_DS_:
000934   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	104; time.c	time_tics++;
000936   2bf1     incf	0xf1, 0x1, 0x1      	INCF	_time_tics, F, B
                                           _00137_DS_:
                                           ;	.line	108; time.c	time_hours = old_time_hours;
000938   c000     movff	0, 0xee            	MOVFF	r0x00, _time_hours
00093a   f0ee
                                           ;	.line	109; time.c	time_mins = old_time_mins;
00093c   c001     movff	0x1, 0xef          	MOVFF	r0x01, _time_mins
00093e   f0ef
                                           ;	.line	110; time.c	time_secs = old_time_secs;
000940   c002     movff	0x2, 0xf0          	MOVFF	r0x02, _time_secs
000942   f0f0
000944   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	112; time.c	time_mins++;
000946   2bef     incf	0xef, 0x1, 0x1      	INCF	_time_mins, F, B
                                           ;	.line	113; time.c	if (time_mins >= num_time_mins){
000948   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
00094a   5def     subwf	0xef, 0, 0x1       	SUBWF	_time_mins, W, B
00094c   e309     bnc	0x960                	BNC	_00146_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	114; time.c	time_mins = 0;
00094e   6bef     clrf	0xef, 0x1           	CLRF	_time_mins, B
                                           ;	.line	119; time.c	save_metrics();
000950   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
000952   f008
000954   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	121; time.c	time_hours++;
000956   2bee     incf	0xee, 0x1, 0x1      	INCF	_time_hours, F, B
                                           ;	.line	122; time.c	if (time_hours >= num_time_hours){
000958   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
00095a   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
00095c   e301     bnc	0x960                	BNC	_00146_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	123; time.c	time_hours = 0;
00095e   6bee     clrf	0xee, 0x1           	CLRF	_time_hours, B
                                           _00146_DS_:
000960   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000962   f003
000964   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000966   f002
000968   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00096a   f001
00096c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00096e   f000
000970   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__clear_secs	code
                                           _clear_secs:
0010c8   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	68; time.c	time_secs = 0;
0010ca   6bf0     clrf	0xf0, 0x1           	CLRF	_time_secs, B
0010cc   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	69; time.c	time_tics = 0;
0010ce   6bf1     clrf	0xf1, 0x1           	CLRF	_time_tics, B
                                           ;	.line	70; time.c	write_time_to_ds3231(ds3231_write_secs);
0010d0   0e00     movlw	0                  	MOVLW	0x00
0010d2   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0010d4   ec59     call	0xab2, 0            	CALL	_write_time_to_ds3231
0010d6   f005
0010d8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0010da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_mins	code
                                           _inc_mins:
00106c   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	52; time.c	time_mins++;
00106e   2bef     incf	0xef, 0x1, 0x1      	INCF	_time_mins, F, B
                                           ;	.line	53; time.c	if (time_mins >= num_time_mins)
001070   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
001072   5def     subwf	0xef, 0, 0x1       	SUBWF	_time_mins, W, B
001074   e301     bnc	0x1078               	BNC	_00122_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	54; time.c	time_mins = 0;
001076   6bef     clrf	0xef, 0x1           	CLRF	_time_mins, B
                                           _00122_DS_:
                                           ;	.line	55; time.c	write_time_to_ds3231(ds3231_write_mins);
001078   0e01     movlw	0x1                	MOVLW	0x01
00107a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00107c   ec59     call	0xab2, 0            	CALL	_write_time_to_ds3231
00107e   f005
001080   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001082   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__dec_hours	code
                                           _dec_hours:
001052   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	45; time.c	time_hours--;
001054   07ee     decf	0xee, 0x1, 0x1      	DECF	_time_hours, F, B
                                           ;	.line	46; time.c	if (time_hours >= num_time_hours)
001056   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
001058   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
00105a   e302     bnc	0x1060               	BNC	_00116_DS_
                                           ;	.line	47; time.c	time_hours = num_time_hours - 1;
00105c   0e17     movlw	0x17               	MOVLW	0x17
                                           ; removed redundant BANKSEL
00105e   6fee     movwf	0xee, 0x1          	MOVWF	_time_hours, B
                                           _00116_DS_:
                                           ;	.line	48; time.c	write_time_to_ds3231(ds3231_write_hours);
001060   0e02     movlw	0x2                	MOVLW	0x02
001062   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001064   ec59     call	0xab2, 0            	CALL	_write_time_to_ds3231
001066   f005
001068   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00106a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_hours	code
                                           _inc_hours:
001084   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	38; time.c	time_hours++;
001086   2bee     incf	0xee, 0x1, 0x1      	INCF	_time_hours, F, B
                                           ;	.line	39; time.c	if (time_hours >= num_time_hours)
001088   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
00108a   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
00108c   e301     bnc	0x1090               	BNC	_00110_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	40; time.c	time_hours = 0;
00108e   6bee     clrf	0xee, 0x1           	CLRF	_time_hours, B
                                           _00110_DS_:
                                           ;	.line	41; time.c	write_time_to_ds3231(ds3231_write_hours);
001090   0e02     movlw	0x2                	MOVLW	0x02
001092   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001094   ec59     call	0xab2, 0            	CALL	_write_time_to_ds3231
001096   f005
001098   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00109a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__init_time	code
                                           _init_time:
                                           ;	.line	28; time.c	init_ds3231();
0010f0   ecb1     call	0x1162, 0           	CALL	_init_ds3231
0010f2   f008
                                           ;	.line	32; time.c	delay100ktcy(1);
0010f4   0e01     movlw	0x1                	MOVLW	0x01
0010f6   ecbb     call	0xb76, 0            	CALL	_delay100ktcy
0010f8   f005
                                           ;	.line	34; time.c	read_time_from_ds3231();
0010fa   ecf2     call	0x7e4, 0            	CALL	_read_time_from_ds3231
0010fc   f003
0010fe   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  306 (0x0132) bytes ( 0.23%)
                                           ;           	  153 (0x0099) words
                                           ; udata size:	    4 (0x0004) bytes ( 6.25%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Tue Jun 24 22:20:40 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_user
                                           	global _do_user
                                           	global _mode
                                           	global _silly_hour_display
                                           	global _display_time
                                           	global _check_for_keypresses
                                           	global _check_brightness
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _dot1
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay10tcy
                                           	extern _inc_hours
                                           	extern _dec_hours
                                           	extern _inc_mins
                                           	extern _clear_secs
                                           	extern _init_display
                                           	extern _display_digits_real
                                           	extern _trigger_save_eeprom
                                           	extern _save_eeprom_fully
                                           	extern _to_bcd
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           
                                           udata_user_0	udata
                                           _hours_debounce	res	2
                                           
                                           udata_user_1	udata
                                           _mins_debounce	res	2
                                           
                                           udata_user_2	udata
                                           _secs_debounce	res	2
                                           
                                           udata_user_3	udata
                                           _mode	res	1
                                           
                                           udata_user_4	udata
                                           _silly_hour_display	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_user__do_user	code
                                           _do_user:
                                           ;	.line	215; user.c	check_brightness();
00110e   ec95     call	0x112a, 0           	CALL	_check_brightness
001110   f008
                                           ;	.line	216; user.c	check_for_keypresses();
001112   ec77     call	0x2ee, 0            	CALL	_check_for_keypresses
001114   f001
                                           ;	.line	217; user.c	display_time();
001116   ec6b     call	0x6d6, 0            	CALL	_display_time
001118   f003
00111a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__check_brightness	code
                                           _check_brightness:
                                           ;	.line	209; user.c	ADCON0bits.GO = 1;
00112a   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
                                           _00293_DS_:
                                           ;	.line	210; user.c	while (ADCON0bits.GO);
00112c   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
00112e   d7fe     bra	0x112c               	BRA	_00293_DS_
                                           ;	.line	211; user.c	CCPR1L = ADRESH;
001130   cfc4     movff	0xfc4, 0xfbe       	MOVFF	_ADRESH, _CCPR1L
001132   ffbe
001134   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__check_for_keypresses	code
                                           _check_for_keypresses:
                                           ;	.line	178; user.c	void check_for_keypresses(){
0002ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0002f0   ffe5
0002f2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0002f4   ffe5
0002f6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0002f8   ffe5
0002fa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0002fc   ffe5
                                           ;	.line	180; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
0002fe   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000300   d02d     bra	0x35c                	BRA	_00226_DS_
000302   0e7c     movlw	0x7c               	MOVLW	0x7c
000304   0100     movlb	0                  	BANKSEL	_hours_debounce
000306   5de7     subwf	0xe7, 0, 0x1       	SUBWF	_hours_debounce, W, B
000308   e229     bc	0x35c                 	BC	_00226_DS_
00030a   6a00     clrf	0, 0                	CLRF	r0x00
00030c   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00030e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000310   5000     movf	0, 0, 0             	MOVF	r0x00, W
000312   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000314   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000316   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000318   6a00     clrf	0, 0                	CLRF	r0x00
00031a   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
00031c   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00031e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000320   e01d     bz	0x35c                 	BZ	_00226_DS_
                                           ;	.line	181; user.c	inc_hours();
000322   ec42     call	0x1084, 0           	CALL	_inc_hours
000324   f008
                                           ;	.line	182; user.c	inc_metric_sw_hours();
000326   c0c4     movff	0xc4, 0            	MOVFF	(_eeprom_data + 4), r0x00
000328   f000
00032a   c0c5     movff	0xc5, 0x1          	MOVFF	(_eeprom_data + 5), r0x01
00032c   f001
00032e   c0c6     movff	0xc6, 0x2          	MOVFF	(_eeprom_data + 6), r0x02
000330   f002
000332   c0c7     movff	0xc7, 0x3          	MOVFF	(_eeprom_data + 7), r0x03
000334   f003
000336   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000338   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00033a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00033c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00033e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000340   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000342   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000344   5000     movf	0, 0, 0             	MOVF	r0x00, W
000346   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
000348   6fc4     movwf	0xc4, 0x1          	MOVWF	(_eeprom_data + 4), B
00034a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00034c   6fc5     movwf	0xc5, 0x1          	MOVWF	(_eeprom_data + 5), B
00034e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000350   6fc6     movwf	0xc6, 0x1          	MOVWF	(_eeprom_data + 6), B
000352   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000354   6fc7     movwf	0xc7, 0x1          	MOVWF	(_eeprom_data + 7), B
000356   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
000358   f008
00035a   d029     bra	0x3ae                	BRA	_00227_DS_
                                           _00226_DS_:
00035c   0100     movlb	0                  	BANKSEL	_hours_debounce
                                           ;	.line	183; user.c	} else if (debounce_held_down(hours_debounce,hours_switch_raw)) {
00035e   51e7     movf	0xe7, 0, 0x1        	MOVF	_hours_debounce, W, B
000360   0a01     xorlw	0x1                	XORLW	0x01
000362   e125     bnz	0x3ae                	BNZ	_00227_DS_
000364   6a00     clrf	0, 0                	CLRF	r0x00
000366   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000368   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00036a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00036c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00036e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000370   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000372   6a00     clrf	0, 0                	CLRF	r0x00
000374   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000376   5000     movf	0, 0, 0             	MOVF	r0x00, W
000378   0a01     xorlw	0x1                	XORLW	0x01
00037a   e119     bnz	0x3ae                	BNZ	_00227_DS_
                                           _00275_DS_:
00037c   0100     movlb	0                  	BANKSEL	_silly_hour_display
                                           ;	.line	184; user.c	silly_hour_display = !silly_hour_display;
00037e   51f3     movf	0xf3, 0, 0x1        	MOVF	_silly_hour_display, W, B
000380   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000382   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000384   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           ; removed redundant BANKSEL
000386   6bf3     clrf	0xf3, 0x1           	CLRF	_silly_hour_display, B
000388   37f3     rlcf	0xf3, 0x1, 0x1      	RLCF	_silly_hour_display, F, B
                                           ;	.line	185; user.c	eeprom_write_uint32(silly_hour_display,EEPROM_ADDR_SILLY_HOUR_DISPLAY);
00038a   c0f3     movff	0xf3, 0            	MOVFF	_silly_hour_display, r0x00
00038c   f000
00038e   6a01     clrf	0x1, 0              	CLRF	r0x01
000390   6a02     clrf	0x2, 0              	CLRF	r0x02
000392   6a03     clrf	0x3, 0              	CLRF	r0x03
000394   5000     movf	0, 0, 0             	MOVF	r0x00, W
000396   0100     movlb	0                  	BANKSEL	(_eeprom_data + 32)
000398   6fe0     movwf	0xe0, 0x1          	MOVWF	(_eeprom_data + 32), B
00039a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00039c   6fe1     movwf	0xe1, 0x1          	MOVWF	(_eeprom_data + 33), B
00039e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0003a0   6fe2     movwf	0xe2, 0x1          	MOVWF	(_eeprom_data + 34), B
0003a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0003a4   6fe3     movwf	0xe3, 0x1          	MOVWF	(_eeprom_data + 35), B
                                           ;	.line	186; user.c	trigger_save_eeprom();
0003a6   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
0003a8   f008
                                           ;	.line	189; user.c	dec_hours();
0003aa   ec29     call	0x1052, 0           	CALL	_dec_hours
0003ac   f008
                                           _00227_DS_:
                                           ;	.line	192; user.c	if (debounce_just_pressed(mins_debounce,mins_switch_raw)){
0003ae   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0003b0   d02c     bra	0x40a                	BRA	_00231_DS_
0003b2   0e7c     movlw	0x7c               	MOVLW	0x7c
0003b4   0100     movlb	0                  	BANKSEL	_mins_debounce
0003b6   5de9     subwf	0xe9, 0, 0x1       	SUBWF	_mins_debounce, W, B
0003b8   e228     bc	0x40a                 	BC	_00231_DS_
0003ba   6a00     clrf	0, 0                	CLRF	r0x00
0003bc   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0003be   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003c2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0003c4   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0003c6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0003c8   6a00     clrf	0, 0                	CLRF	r0x00
0003ca   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
0003cc   51ea     movf	0xea, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
0003ce   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0003d0   e01c     bz	0x40a                 	BZ	_00231_DS_
                                           ;	.line	193; user.c	inc_mins();
0003d2   ec36     call	0x106c, 0           	CALL	_inc_mins
0003d4   f008
                                           ;	.line	194; user.c	inc_metric_sw_mins();
0003d6   c0c8     movff	0xc8, 0            	MOVFF	(_eeprom_data + 8), r0x00
0003d8   f000
0003da   c0c9     movff	0xc9, 0x1          	MOVFF	(_eeprom_data + 9), r0x01
0003dc   f001
0003de   c0ca     movff	0xca, 0x2          	MOVFF	(_eeprom_data + 10), r0x02
0003e0   f002
0003e2   c0cb     movff	0xcb, 0x3          	MOVFF	(_eeprom_data + 11), r0x03
0003e4   f003
0003e6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003ea   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0003ec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003ee   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0003f0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003f2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0003f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003f6   0100     movlb	0                  	BANKSEL	(_eeprom_data + 8)
0003f8   6fc8     movwf	0xc8, 0x1          	MOVWF	(_eeprom_data + 8), B
0003fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0003fc   6fc9     movwf	0xc9, 0x1          	MOVWF	(_eeprom_data + 9), B
0003fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000400   6fca     movwf	0xca, 0x1          	MOVWF	(_eeprom_data + 10), B
000402   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000404   6fcb     movwf	0xcb, 0x1          	MOVWF	(_eeprom_data + 11), B
000406   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
000408   f008
                                           _00231_DS_:
                                           ;	.line	197; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
00040a   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTA, 7
00040c   d02c     bra	0x466                	BRA	_00235_DS_
00040e   0e7c     movlw	0x7c               	MOVLW	0x7c
000410   0100     movlb	0                  	BANKSEL	_secs_debounce
000412   5deb     subwf	0xeb, 0, 0x1       	SUBWF	_secs_debounce, W, B
000414   e228     bc	0x466                 	BC	_00235_DS_
000416   0e80     movlw	0x80               	MOVLW	0x80
000418   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
00041a   6e00     movwf	0, 0               	MOVWF	r0x00
00041c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00041e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000420   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000422   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000424   6a00     clrf	0, 0                	CLRF	r0x00
000426   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
000428   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
00042a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00042c   e01c     bz	0x466                 	BZ	_00235_DS_
                                           ;	.line	198; user.c	clear_secs();
00042e   ec64     call	0x10c8, 0           	CALL	_clear_secs
000430   f008
                                           ;	.line	199; user.c	inc_metric_sw_secs();
000432   c0cc     movff	0xcc, 0            	MOVFF	(_eeprom_data + 12), r0x00
000434   f000
000436   c0cd     movff	0xcd, 0x1          	MOVFF	(_eeprom_data + 13), r0x01
000438   f001
00043a   c0ce     movff	0xce, 0x2          	MOVFF	(_eeprom_data + 14), r0x02
00043c   f002
00043e   c0cf     movff	0xcf, 0x3          	MOVFF	(_eeprom_data + 15), r0x03
000440   f003
000442   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000444   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000446   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000448   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00044a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00044c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00044e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000450   5000     movf	0, 0, 0             	MOVF	r0x00, W
000452   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
000454   6fcc     movwf	0xcc, 0x1          	MOVWF	(_eeprom_data + 12), B
000456   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000458   6fcd     movwf	0xcd, 0x1          	MOVWF	(_eeprom_data + 13), B
00045a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00045c   6fce     movwf	0xce, 0x1          	MOVWF	(_eeprom_data + 14), B
00045e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000460   6fcf     movwf	0xcf, 0x1          	MOVWF	(_eeprom_data + 15), B
000462   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
000464   f008
                                           _00235_DS_:
                                           ;	.line	202; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
000466   6a00     clrf	0, 0                	CLRF	r0x00
000468   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00046a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00046c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00046e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000470   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000472   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000474   6a00     clrf	0, 0                	CLRF	r0x00
000476   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000478   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
00047a   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00047c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00047e   e00e     bz	0x49c                 	BZ	_00239_DS_
000480   0e7f     movlw	0x7f               	MOVLW	0x7f
000482   0100     movlb	0                  	BANKSEL	_hours_debounce
000484   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
000486   6a00     clrf	0, 0                	CLRF	r0x00
000488   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00048a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00048c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00048e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000490   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000492   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000494   6a00     clrf	0, 0                	CLRF	r0x00
000496   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000498   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00049a   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00239_DS_:
00049c   c0e7     movff	0xe7, 0            	MOVFF	_hours_debounce, r0x00
00049e   f000
0004a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004a2   e004     bz	0x4ac                 	BZ	_00241_DS_
0004a4   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004a8   0100     movlb	0                  	BANKSEL	_hours_debounce
0004aa   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
                                           _00241_DS_:
                                           ;	.line	203; user.c	debounce_add_sample(mins_debounce,mins_switch_raw);
0004ac   6a00     clrf	0, 0                	CLRF	r0x00
0004ae   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0004b0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004b4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004b6   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004b8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004ba   6a00     clrf	0, 0                	CLRF	r0x00
0004bc   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004be   0100     movlb	0                  	BANKSEL	(_mins_debounce + 1)
0004c0   51ea     movf	0xea, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
0004c2   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0004c4   e00e     bz	0x4e2                 	BZ	_00243_DS_
0004c6   0e7f     movlw	0x7f               	MOVLW	0x7f
0004c8   0100     movlb	0                  	BANKSEL	_mins_debounce
0004ca   6fe9     movwf	0xe9, 0x1          	MOVWF	_mins_debounce, B
0004cc   6a00     clrf	0, 0                	CLRF	r0x00
0004ce   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0004d0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004d4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004d6   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004d8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004da   6a00     clrf	0, 0                	CLRF	r0x00
0004dc   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004de   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004e0   6fea     movwf	0xea, 0x1          	MOVWF	(_mins_debounce + 1), B
                                           _00243_DS_:
0004e2   c0e9     movff	0xe9, 0            	MOVFF	_mins_debounce, r0x00
0004e4   f000
0004e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004e8   e004     bz	0x4f2                 	BZ	_00245_DS_
0004ea   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004ee   0100     movlb	0                  	BANKSEL	_mins_debounce
0004f0   6fe9     movwf	0xe9, 0x1          	MOVWF	_mins_debounce, B
                                           _00245_DS_:
                                           ;	.line	204; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
0004f2   0e80     movlw	0x80               	MOVLW	0x80
0004f4   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0004f6   6e00     movwf	0, 0               	MOVWF	r0x00
0004f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004fa   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004fc   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004fe   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000500   6a00     clrf	0, 0                	CLRF	r0x00
000502   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000504   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
000506   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000508   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00050a   e00e     bz	0x528                 	BZ	_00247_DS_
00050c   0e7f     movlw	0x7f               	MOVLW	0x7f
00050e   0100     movlb	0                  	BANKSEL	_secs_debounce
000510   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
000512   0e80     movlw	0x80               	MOVLW	0x80
000514   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000516   6e00     movwf	0, 0               	MOVWF	r0x00
000518   5000     movf	0, 0, 0             	MOVF	r0x00, W
00051a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00051c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00051e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000520   6a00     clrf	0, 0                	CLRF	r0x00
000522   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000524   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000526   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00247_DS_:
000528   c0eb     movff	0xeb, 0            	MOVFF	_secs_debounce, r0x00
00052a   f000
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   e004     bz	0x538                 	BZ	_00250_DS_
000530   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000532   5000     movf	0, 0, 0             	MOVF	r0x00, W
000534   0100     movlb	0                  	BANKSEL	_secs_debounce
000536   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
                                           _00250_DS_:
000538   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00053a   f003
00053c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00053e   f002
000540   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000542   f001
000544   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000546   f000
000548   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__display_time	code
                                           _display_time:
                                           ;	.line	129; user.c	void display_time(){
0006d6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0006d8   ffe5
0006da   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0006dc   ffe5
0006de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0006e0   ffe5
0006e2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0006e4   ffe5
0006e6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0006e8   ffe5
0006ea   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0006ec   ffe5
0006ee   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	133; user.c	if (mode == fast_clock){
0006f0   51f2     movf	0xf2, 0, 0x1        	MOVF	_mode, W, B
0006f2   0a01     xorlw	0x1                	XORLW	0x01
0006f4   e10e     bnz	0x712                	BNZ	_00196_DS_
                                           ;	.line	135; user.c	adj_secs = (time_secs / (secs_to_real_secs_divider / 2)) % 60;
0006f6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0006f8   0100     movlb	0                  	BANKSEL	_time_secs
0006fa   31f0     rrcf	0xf0, 0, 0x1        	RRCF	_time_secs, W, B
0006fc   6e00     movwf	0, 0               	MOVWF	r0x00
0006fe   0e3c     movlw	0x3c               	MOVLW	0x3c
000700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000702   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000704   ffe5
000706   ece7     call	0xbce, 0            	CALL	__moduchar
000708   f005
00070a   6e00     movwf	0, 0               	MOVWF	r0x00
00070c   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
00070e   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000710   d00f     bra	0x730                	BRA	_00197_DS_
                                           _00196_DS_:
000712   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	140; user.c	adj_secs = (time_secs / (secs_to_real_secs_divider * 2)) + ((time_mins % 2) * 30);
000714   39f0     swapf	0xf0, 0, 0x1       	SWAPF	_time_secs, W, B
000716   6e01     movwf	0x1, 0             	MOVWF	r0x01
000718   4401     rlncf	0x1, 0, 0          	RLNCF	r0x01, W
00071a   0b1f     andlw	0x1f               	ANDLW	0x1f
00071c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00071e   0e01     movlw	0x1                	MOVLW	0x01
000720   0100     movlb	0                  	BANKSEL	_time_mins
000722   15ef     andwf	0xef, 0, 0x1       	ANDWF	_time_mins, W, B
                                           ; ;multiply lit val:0x1e by variable r0x02 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000724   0d1e     mullw	0x1e               	MULLW	0x1e
000726   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000728   f002
00072a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00072c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00072e   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00197_DS_:
                                           ;	.line	144; user.c	set_dots(false,true,true,true,true,false);
000730   0e01     movlw	0x1                	MOVLW	0x01
000732   0100     movlb	0                  	BANKSEL	_dot1
000734   6fe4     movwf	0xe4, 0x1          	MOVWF	_dot1, B
                                           ;	.line	147; user.c	adj_hours = time_hours;
000736   c0ee     movff	0xee, 0x1          	MOVFF	_time_hours, r0x01
000738   f001
00073a   0100     movlb	0                  	BANKSEL	_silly_hour_display
                                           ;	.line	148; user.c	if (silly_hour_display){
00073c   51f3     movf	0xf3, 0, 0x1        	MOVF	_silly_hour_display, W, B
00073e   e00c     bz	0x758                 	BZ	_00204_DS_
                                           ;	.line	149; user.c	if (adj_hours >= 12){
000740   0e0c     movlw	0xc                	MOVLW	0x0c
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000744   e303     bnc	0x74c                	BNC	_00199_DS_
                                           ;	.line	150; user.c	adj_hours = adj_hours - 12;
000746   0ef4     movlw	0xf4               	MOVLW	0xf4
000748   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00074a   d002     bra	0x750                	BRA	_00200_DS_
                                           _00199_DS_:
00074c   0100     movlb	0                  	BANKSEL	_dot1
                                           ;	.line	153; user.c	set_dots(false,false,true,true,true,false);
00074e   6be4     clrf	0xe4, 0x1           	CLRF	_dot1, B
                                           _00200_DS_:
                                           ;	.line	155; user.c	if (!adj_hours)
000750   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000752   e102     bnz	0x758                	BNZ	_00204_DS_
                                           ;	.line	156; user.c	adj_hours = 12; // blah, so much work for such sillyness
000754   0e0c     movlw	0xc                	MOVLW	0x0c
000756   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00204_DS_:
                                           ;	.line	158; user.c	adj_hours = to_bcd(adj_hours);
000758   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00075a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00075c   ec91     call	0xd22, 0            	CALL	_to_bcd
00075e   f006
000760   6e01     movwf	0x1, 0             	MOVWF	r0x01
000762   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	160; user.c	h0 = adj_hours / 16;
000764   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000766   0b0f     andlw	0xf                	ANDLW	0x0f
000768   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	161; user.c	if (!h0 && silly_hour_display)
00076a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00076c   e105     bnz	0x778                	BNZ	_00206_DS_
00076e   0100     movlb	0                  	BANKSEL	_silly_hour_display
000770   51f3     movf	0xf3, 0, 0x1        	MOVF	_silly_hour_display, W, B
000772   e002     bz	0x778                 	BZ	_00206_DS_
                                           ;	.line	162; user.c	h0 = CHAR_BLANK; // remove leading zeros for hours
000774   0e10     movlw	0x10               	MOVLW	0x10
000776   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00206_DS_:
                                           ;	.line	167; user.c	h1 = adj_hours % 16;
000778   0e0f     movlw	0xf                	MOVLW	0x0f
00077a   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
00077c   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	170; user.c	adj_mins = to_bcd(time_mins);
00077e   51ef     movf	0xef, 0, 0x1        	MOVF	_time_mins, W, B
000780   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000782   ec91     call	0xd22, 0            	CALL	_to_bcd
000784   f006
000786   6e03     movwf	0x3, 0             	MOVWF	r0x03
000788   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	171; user.c	adj_secs = to_bcd(adj_secs);
00078a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00078c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00078e   ec91     call	0xd22, 0            	CALL	_to_bcd
000790   f006
000792   6e00     movwf	0, 0               	MOVWF	r0x00
000794   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	172; user.c	display_digits(
000796   3803     swapf	0x3, 0, 0          	SWAPF	r0x03, W
000798   0b0f     andlw	0xf                	ANDLW	0x0f
00079a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00079c   0e0f     movlw	0xf                	MOVLW	0x0f
00079e   1603     andwf	0x3, 0x1, 0        	ANDWF	r0x03, F
0007a0   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0007a2   0b0f     andlw	0xf                	ANDLW	0x0f
0007a4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0007a6   0e0f     movlw	0xf                	MOVLW	0x0f
0007a8   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0007aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0007b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007b6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007be   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0007c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c2   eca5     call	0x54a, 0            	CALL	_display_digits_real
0007c4   f002
0007c6   0e06     movlw	0x6                	MOVLW	0x06
0007c8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ca   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0007cc   f005
0007ce   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0007d0   f004
0007d2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0007d4   f003
0007d6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0007d8   f002
0007da   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0007dc   f001
0007de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0007e0   f000
0007e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__init_user	code
                                           _init_user:
                                           ;	.line	48; user.c	void init_user(){
00002a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00002c   ffe5
00002e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000030   ffe5
000032   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000034   ffe5
000036   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000038   ffe5
00003a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00003c   ffe5
00003e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000040   ffe5
000042   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000044   ffe5
                                           ;	.line	51; user.c	init_display();
000046   ec07     call	0x100e, 0           	CALL	_init_display
000048   f008
                                           ;	.line	53; user.c	TRISBbits.TRISB2 = 1;
00004a   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	61; user.c	TRISA = TRISA | b(11010001);
00004c   0ed1     movlw	0xd1               	MOVLW	0xd1
00004e   1292     iorwf	0x92, 0x1, 0       	IORWF	_TRISA, F
                                           ;	.line	65; user.c	ADCON0 = b(00000001);
000050   0e01     movlw	0x1                	MOVLW	0x01
000052   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	66; user.c	ADCON1 = b(01111110);
000054   0e7e     movlw	0x7e               	MOVLW	0x7e
000056   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	67; user.c	ADCON2 = b(00000000);
000058   6ac0     clrf	0xc0, 0             	CLRF	_ADCON2
                                           ;	.line	69; user.c	CCP1CON = b(00001100);
00005a   0e0c     movlw	0xc                	MOVLW	0x0c
00005c   6ebd     movwf	0xbd, 0            	MOVWF	_CCP1CON
                                           ;	.line	70; user.c	PR2 = 0xFF;
00005e   0eff     movlw	0xff               	MOVLW	0xff
000060   6ecb     movwf	0xcb, 0            	MOVWF	_PR2
                                           ;	.line	71; user.c	T2CON = b(00000100);
000062   0e04     movlw	0x4                	MOVLW	0x04
000064   6eca     movwf	0xca, 0            	MOVWF	_T2CON
                                           ;	.line	72; user.c	CCPR1L = 0x00;
000066   6abe     clrf	0xbe, 0             	CLRF	_CCPR1L
000068   0100     movlb	0                  	BANKSEL	_hours_debounce
                                           ;	.line	74; user.c	debounce_init(hours_debounce,hours_switch_raw);
00006a   6be7     clrf	0xe7, 0x1           	CLRF	_hours_debounce, B
00006c   6a00     clrf	0, 0                	CLRF	r0x00
00006e   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000070   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000072   5000     movf	0, 0, 0             	MOVF	r0x00, W
000074   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000076   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000078   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00007a   6a00     clrf	0, 0                	CLRF	r0x00
00007c   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00007e   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000080   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
000082   0100     movlb	0                  	BANKSEL	_mins_debounce
                                           ;	.line	75; user.c	debounce_init(mins_debounce,mins_switch_raw);
000084   6be9     clrf	0xe9, 0x1           	CLRF	_mins_debounce, B
000086   6a00     clrf	0, 0                	CLRF	r0x00
000088   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
00008a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00008c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00008e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000090   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000092   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000094   6a00     clrf	0, 0                	CLRF	r0x00
000096   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000098   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00009a   6fea     movwf	0xea, 0x1          	MOVWF	(_mins_debounce + 1), B
00009c   0100     movlb	0                  	BANKSEL	_secs_debounce
                                           ;	.line	76; user.c	debounce_init(secs_debounce,secs_switch_raw);
00009e   6beb     clrf	0xeb, 0x1           	CLRF	_secs_debounce, B
0000a0   0e80     movlw	0x80               	MOVLW	0x80
0000a2   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0000a4   6e00     movwf	0, 0               	MOVWF	r0x00
0000a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000a8   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0000aa   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0000ac   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0000ae   6a00     clrf	0, 0                	CLRF	r0x00
0000b0   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0000b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0000b4   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           ;	.line	78; user.c	if (!hours_switch_raw && !mins_switch_raw && secs_switch_raw){
0000b6   a481     btfss	0x81, 0x2, 0       	BTFSS	_PORTBbits, 2
0000b8   d008     bra	0xca                 	BRA	_00139_DS_
0000ba   ac80     btfss	0x80, 0x6, 0       	BTFSS	_PORTAbits, 6
0000bc   d006     bra	0xca                 	BRA	_00139_DS_
0000be   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTA, 7
0000c0   d004     bra	0xca                 	BRA	_00139_DS_
                                           ;	.line	79; user.c	mode = fast_clock;
0000c2   0e01     movlw	0x1                	MOVLW	0x01
0000c4   0100     movlb	0                  	BANKSEL	_mode
0000c6   6ff2     movwf	0xf2, 0x1          	MOVWF	_mode, B
0000c8   d0ea     bra	0x29e                	BRA	_00140_DS_
                                           _00139_DS_:
                                           ;	.line	80; user.c	} else if (hours_switch_raw && !mins_switch_raw && !secs_switch_raw){
0000ca   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0000cc   d008     bra	0xde                 	BRA	_00134_DS_
0000ce   ac80     btfss	0x80, 0x6, 0       	BTFSS	_PORTAbits, 6
0000d0   d006     bra	0xde                 	BRA	_00134_DS_
0000d2   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTA, 7
0000d4   d004     bra	0xde                 	BRA	_00134_DS_
                                           ;	.line	81; user.c	mode = slow_clock;
0000d6   0e03     movlw	0x3                	MOVLW	0x03
0000d8   0100     movlb	0                  	BANKSEL	_mode
0000da   6ff2     movwf	0xf2, 0x1          	MOVWF	_mode, B
0000dc   d0e0     bra	0x29e                	BRA	_00140_DS_
                                           _00134_DS_:
                                           ;	.line	82; user.c	} else if (!hours_switch_raw && mins_switch_raw && !secs_switch_raw){
0000de   a481     btfss	0x81, 0x2, 0       	BTFSS	_PORTBbits, 2
0000e0   d0db     bra	0x298                	BRA	_00129_DS_
0000e2   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0000e4   d0d9     bra	0x298                	BRA	_00129_DS_
0000e6   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTA, 7
0000e8   d0d7     bra	0x298                	BRA	_00129_DS_
                                           ;	.line	84; user.c	inc_metric_meta();
0000ea   c0d8     movff	0xd8, 0            	MOVFF	(_eeprom_data + 24), r0x00
0000ec   f000
0000ee   c0d9     movff	0xd9, 0x1          	MOVFF	(_eeprom_data + 25), r0x01
0000f0   f001
0000f2   c0da     movff	0xda, 0x2          	MOVFF	(_eeprom_data + 26), r0x02
0000f4   f002
0000f6   c0db     movff	0xdb, 0x3          	MOVFF	(_eeprom_data + 27), r0x03
0000f8   f003
0000fa   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0000fc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0000fe   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000100   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000102   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000104   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000106   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000108   5000     movf	0, 0, 0             	MOVF	r0x00, W
00010a   0100     movlb	0                  	BANKSEL	(_eeprom_data + 24)
00010c   6fd8     movwf	0xd8, 0x1          	MOVWF	(_eeprom_data + 24), B
00010e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000110   6fd9     movwf	0xd9, 0x1          	MOVWF	(_eeprom_data + 25), B
000112   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000114   6fda     movwf	0xda, 0x1          	MOVWF	(_eeprom_data + 26), B
000116   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000118   6fdb     movwf	0xdb, 0x1          	MOVWF	(_eeprom_data + 27), B
00011a   ec5a     call	0x10b4, 0           	CALL	_save_eeprom_fully
00011c   f008
                                           ;	.line	89; user.c	i = 0;
00011e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00126_DS_:
                                           ;	.line	91; user.c	display_digits(
000120   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
000122   0b0f     andlw	0xf                	ANDLW	0x0f
000124   6e01     movwf	0x1, 0             	MOVWF	r0x01
000126   0e0f     movlw	0xf                	MOVLW	0x0f
000128   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
00012a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00012c   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
00012e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000130   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000132   6e03     movwf	0x3, 0             	MOVWF	r0x03
000134   0e80     movlw	0x80               	MOVLW	0x80
000136   6e05     movwf	0x5, 0             	MOVWF	r0x05
000138   5000     movf	0, 0, 0             	MOVF	r0x00, W
00013a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00013c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00013e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000140   6ae8     clrf	0xe8, 0             	CLRF	WREG
000142   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000144   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000146   ffe9
000148   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00014a   fff3
00014c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00014e   ec18     call	0x1030, 0           	CALL	__gptrget1
000150   f008
000152   6e03     movwf	0x3, 0             	MOVWF	r0x03
000154   3803     swapf	0x3, 0, 0          	SWAPF	r0x03, W
000156   0b0f     andlw	0xf                	ANDLW	0x0f
000158   6e03     movwf	0x3, 0             	MOVWF	r0x03
00015a   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
00015c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00015e   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000160   6e04     movwf	0x4, 0             	MOVWF	r0x04
000162   0e80     movlw	0x80               	MOVLW	0x80
000164   6e06     movwf	0x6, 0             	MOVWF	r0x06
000166   5000     movf	0, 0, 0             	MOVF	r0x00, W
000168   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00016a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00016c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00016e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000170   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000172   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000174   ffe9
000176   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000178   fff3
00017a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00017c   ec18     call	0x1030, 0           	CALL	__gptrget1
00017e   f008
000180   6e04     movwf	0x4, 0             	MOVWF	r0x04
000182   0e0f     movlw	0xf                	MOVLW	0x0f
000184   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
000186   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00018c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00018e   0e10     movlw	0x10               	MOVLW	0x10
000190   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000192   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000194   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000198   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019c   eca5     call	0x54a, 0            	CALL	_display_digits_real
00019e   f002
0001a0   0e06     movlw	0x6                	MOVLW	0x06
0001a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	97; user.c	delay10tcy(1);
0001a4   0e01     movlw	0x1                	MOVLW	0x01
0001a6   ecaf     call	0xb5e, 0            	CALL	_delay10tcy
0001a8   f005
                                           ;	.line	99; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
0001aa   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0001ac   d015     bra	0x1d8                	BRA	_00108_DS_
0001ae   0e7c     movlw	0x7c               	MOVLW	0x7c
0001b0   0100     movlb	0                  	BANKSEL	_hours_debounce
0001b2   5de7     subwf	0xe7, 0, 0x1       	SUBWF	_hours_debounce, W, B
0001b4   e211     bc	0x1d8                 	BC	_00108_DS_
0001b6   6a01     clrf	0x1, 0              	CLRF	r0x01
0001b8   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0001ba   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001be   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001c0   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001c2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001c4   6a01     clrf	0x1, 0              	CLRF	r0x01
0001c6   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
0001c8   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
0001ca   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0001cc   e005     bz	0x1d8                 	BZ	_00108_DS_
                                           ;	.line	100; user.c	i++;
0001ce   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	101; user.c	if (i >= sizeof(eeprom_data))
0001d0   0e24     movlw	0x24               	MOVLW	0x24
0001d2   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0001d4   e301     bnc	0x1d8                	BNC	_00108_DS_
                                           ;	.line	102; user.c	i = 0;
0001d6   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00108_DS_:
                                           ;	.line	104; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
0001d8   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTA, 7
0001da   d016     bra	0x208                	BRA	_00114_DS_
0001dc   0e7c     movlw	0x7c               	MOVLW	0x7c
0001de   0100     movlb	0                  	BANKSEL	_secs_debounce
0001e0   5deb     subwf	0xeb, 0, 0x1       	SUBWF	_secs_debounce, W, B
0001e2   e212     bc	0x208                 	BC	_00114_DS_
0001e4   0e80     movlw	0x80               	MOVLW	0x80
0001e6   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0001e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001ec   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001ee   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001f0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001f2   6a01     clrf	0x1, 0              	CLRF	r0x01
0001f4   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
0001f6   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0001f8   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0001fa   e006     bz	0x208                 	BZ	_00114_DS_
                                           ;	.line	105; user.c	i--;
0001fc   0600     decf	0, 0x1, 0           	DECF	r0x00, F
                                           ;	.line	106; user.c	if (i >= sizeof(eeprom_data))
0001fe   0e24     movlw	0x24               	MOVLW	0x24
000200   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000202   e302     bnc	0x208                	BNC	_00114_DS_
                                           ;	.line	107; user.c	i = sizeof(eeprom_data) - 1;
000204   0e23     movlw	0x23               	MOVLW	0x23
000206   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00114_DS_:
                                           ;	.line	110; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
000208   6a01     clrf	0x1, 0              	CLRF	r0x01
00020a   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00020c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00020e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000210   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000212   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000214   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000216   6a01     clrf	0x1, 0              	CLRF	r0x01
000218   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00021a   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
00021c   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00021e   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000220   e00e     bz	0x23e                 	BZ	_00118_DS_
000222   0e7f     movlw	0x7f               	MOVLW	0x7f
000224   0100     movlb	0                  	BANKSEL	_hours_debounce
000226   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
000228   6a01     clrf	0x1, 0              	CLRF	r0x01
00022a   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00022c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00022e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000230   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000232   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000234   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000236   6a01     clrf	0x1, 0              	CLRF	r0x01
000238   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00023a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00023c   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00118_DS_:
00023e   c0e7     movff	0xe7, 0x1          	MOVFF	_hours_debounce, r0x01
000240   f001
000242   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000244   e004     bz	0x24e                 	BZ	_00120_DS_
000246   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000248   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00024a   0100     movlb	0                  	BANKSEL	_hours_debounce
00024c   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
                                           _00120_DS_:
                                           ;	.line	111; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
00024e   0e80     movlw	0x80               	MOVLW	0x80
000250   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000252   6e01     movwf	0x1, 0             	MOVWF	r0x01
000254   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000256   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000258   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00025a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00025c   6a01     clrf	0x1, 0              	CLRF	r0x01
00025e   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000260   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
000262   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000264   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000266   e00e     bz	0x284                 	BZ	_00122_DS_
000268   0e7f     movlw	0x7f               	MOVLW	0x7f
00026a   0100     movlb	0                  	BANKSEL	_secs_debounce
00026c   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
00026e   0e80     movlw	0x80               	MOVLW	0x80
000270   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000272   6e01     movwf	0x1, 0             	MOVWF	r0x01
000274   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000276   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000278   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00027a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00027c   6a01     clrf	0x1, 0              	CLRF	r0x01
00027e   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000280   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000282   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00122_DS_:
000284   0100     movlb	0                  	BANKSEL	_secs_debounce
000286   51eb     movf	0xeb, 0, 0x1        	MOVF	_secs_debounce, W, B
000288   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00028a   d74a     bra	0x120                	BRA	_00126_DS_
00028c   c0eb     movff	0xeb, 0x1          	MOVFF	_secs_debounce, r0x01
00028e   f001
000290   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000292   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000294   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
000296   d744     bra	0x120                	BRA	_00126_DS_
                                           _00129_DS_:
                                           ;	.line	115; user.c	mode = none_chosen;
000298   0e05     movlw	0x5                	MOVLW	0x05
00029a   0100     movlb	0                  	BANKSEL	_mode
00029c   6ff2     movwf	0xf2, 0x1          	MOVWF	_mode, B
                                           _00140_DS_:
00029e   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	118; user.c	if (mode == none_chosen){
0002a0   51f2     movf	0xf2, 0, 0x1        	MOVF	_mode, W, B
0002a2   0a05     xorlw	0x5                	XORLW	0x05
0002a4   e105     bnz	0x2b0                	BNZ	_00144_DS_
                                           _00190_DS_:
0002a6   0100     movlb	0                  	BANKSEL	(_eeprom_data + 28)
                                           ;	.line	119; user.c	mode = eeprom_read_uint32(EEPROM_ADDR_MODE);  
0002a8   51dc     movf	0xdc, 0, 0x1        	MOVF	(_eeprom_data + 28), W, B
0002aa   0100     movlb	0                  	BANKSEL	_mode
0002ac   6ff2     movwf	0xf2, 0x1          	MOVWF	_mode, B
0002ae   d00c     bra	0x2c8                	BRA	_00145_DS_
                                           _00144_DS_:
                                           ;	.line	121; user.c	eeprom_write_uint32(mode,EEPROM_ADDR_MODE);
0002b0   c0f2     movff	0xf2, 0            	MOVFF	_mode, r0x00
0002b2   f000
0002b4   6a01     clrf	0x1, 0              	CLRF	r0x01
0002b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002b8   0100     movlb	0                  	BANKSEL	(_eeprom_data + 28)
0002ba   6fdc     movwf	0xdc, 0x1          	MOVWF	(_eeprom_data + 28), B
0002bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0002be   6bdd     clrf	0xdd, 0x1           	CLRF	(_eeprom_data + 29), B
                                           ; removed redundant BANKSEL
0002c0   6bde     clrf	0xde, 0x1           	CLRF	(_eeprom_data + 30), B
                                           ; removed redundant BANKSEL
0002c2   6bdf     clrf	0xdf, 0x1           	CLRF	(_eeprom_data + 31), B
                                           ;	.line	122; user.c	trigger_save_eeprom();
0002c4   ecb4     call	0x1168, 0           	CALL	_trigger_save_eeprom
0002c6   f008
                                           _00145_DS_:
0002c8   0100     movlb	0                  	BANKSEL	(_eeprom_data + 32)
                                           ;	.line	125; user.c	silly_hour_display = eeprom_read_uint32(EEPROM_ADDR_SILLY_HOUR_DISPLAY);
0002ca   51e0     movf	0xe0, 0, 0x1        	MOVF	(_eeprom_data + 32), W, B
0002cc   0100     movlb	0                  	BANKSEL	_silly_hour_display
0002ce   6ff3     movwf	0xf3, 0x1          	MOVWF	_silly_hour_display, B
0002d0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0002d2   f006
0002d4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0002d6   f005
0002d8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0002da   f004
0002dc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0002de   f003
0002e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0002e2   f002
0002e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0002e6   f001
0002e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0002ea   f000
0002ec   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1608 (0x0648) bytes ( 1.23%)
                                           ;           	  804 (0x0324) words
                                           ; udata size:	    8 (0x0008) bytes (12.50%)
                                           ; access size:	    7 (0x0007) bytes
                                           
                                           
                                           	end
