gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 12-8-2008  23:52:53
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_display
                                           	global _display_digits_real
                                           	global _dot1
                                           	global _output_digit
                                           	global _output_flipped_digit
                                           	global _char_to_digit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           	idata
                                           _dot1	db	0x01
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_display_0	udata
                                           _output_digit_w_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_display__display_digits_real	code
                                           _display_digits_real:
                                           ;	.line	92; display.c	void display_digits_real(uint8_t d0,uint8_t d1,uint8_t d2,uint8_t d3,uint8_t d4,uint8_t d5){
000572   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000574   ffe5
000576   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000578   ffd9
00057a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00057c   ffe5
00057e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000580   ffe5
000582   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000584   ffe5
000586   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000588   ffe5
00058a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00058c   ffe5
00058e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000590   ffe5
000592   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000594   ffe5
000596   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000598   ffe5
00059a   0e02     movlw	0x2                	MOVLW	0x02
00059c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00059e   f000
0005a0   0e03     movlw	0x3                	MOVLW	0x03
0005a2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0005a4   f001
0005a6   0e04     movlw	0x4                	MOVLW	0x04
0005a8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0005aa   f002
0005ac   0e05     movlw	0x5                	MOVLW	0x05
0005ae   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0005b0   f003
0005b2   0e06     movlw	0x6                	MOVLW	0x06
0005b4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0005b6   f004
0005b8   0e07     movlw	0x7                	MOVLW	0x07
0005ba   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0005bc   f005
                                           ;	.line	94; display.c	LATBbits.LATB3 = 0;
0005be   968a     bcf	0x8a, 0x3, 0         	BCF	_LATBbits, 3
                                           ;	.line	97; display.c	output_flipped_digit(char_to_digit[d5]);
0005c0   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
0005c2   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0005c4   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
0005c6   6a06     clrf	0x6, 0              	CLRF	r0x06
0005c8   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0005ca   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0005cc   6a07     clrf	0x7, 0              	CLRF	r0x07
0005ce   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0005d0   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
0005d2   fff6
0005d4   c006     movff	0x6, 0xff7         	MOVFF	r0x06, TBLPTRH
0005d6   fff7
0005d8   c007     movff	0x7, 0xff8         	MOVFF	r0x07, TBLPTRU
0005da   fff8
0005dc   0009     tblrd	*+                 	TBLRD*+	
0005de   cff5     movff	0xff5, 0x5         	MOVFF	TABLAT, r0x05
0005e0   f005
0005e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005e6   ec2e     call	0xe5c, 0            	CALL	_output_flipped_digit
0005e8   f007
0005ea   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	98; display.c	output_flipped_digit(char_to_digit[d4] | b(00000001)); 
0005ec   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
0005ee   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005f0   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
0005f2   6a05     clrf	0x5, 0              	CLRF	r0x05
0005f4   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0005f6   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0005f8   6a06     clrf	0x6, 0              	CLRF	r0x06
0005fa   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0005fc   c004     movff	0x4, 0xff6         	MOVFF	r0x04, TBLPTRL
0005fe   fff6
000600   c005     movff	0x5, 0xff7         	MOVFF	r0x05, TBLPTRH
000602   fff7
000604   c006     movff	0x6, 0xff8         	MOVFF	r0x06, TBLPTRU
000606   fff8
000608   0009     tblrd	*+                 	TBLRD*+	
00060a   cff5     movff	0xff5, 0x4         	MOVFF	TABLAT, r0x04
00060c   f004
00060e   8004     bsf	0x4, 0, 0            	BSF	r0x04, 0
000610   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000614   ec2e     call	0xe5c, 0            	CALL	_output_flipped_digit
000616   f007
000618   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	99; display.c	output_digit(char_to_digit[d3] | b(00000001));
00061a   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
00061c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00061e   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
000620   6a04     clrf	0x4, 0              	CLRF	r0x04
000622   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000624   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
000626   6a05     clrf	0x5, 0              	CLRF	r0x05
000628   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00062a   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
00062c   fff6
00062e   c004     movff	0x4, 0xff7         	MOVFF	r0x04, TBLPTRH
000630   fff7
000632   c005     movff	0x5, 0xff8         	MOVFF	r0x05, TBLPTRU
000634   fff8
000636   0009     tblrd	*+                 	TBLRD*+	
000638   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
00063a   f003
00063c   8003     bsf	0x3, 0, 0            	BSF	r0x03, 0
00063e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000640   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000642   ecf3     call	0x9e6, 0            	CALL	_output_digit
000644   f004
000646   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	100; display.c	output_flipped_digit(char_to_digit[d2] | b(00000001));
000648   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
00064a   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00064c   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
00064e   6a03     clrf	0x3, 0              	CLRF	r0x03
000650   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000652   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
000654   6a04     clrf	0x4, 0              	CLRF	r0x04
000656   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000658   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00065a   fff6
00065c   c003     movff	0x3, 0xff7         	MOVFF	r0x03, TBLPTRH
00065e   fff7
000660   c004     movff	0x4, 0xff8         	MOVFF	r0x04, TBLPTRU
000662   fff8
000664   0009     tblrd	*+                 	TBLRD*+	
000666   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
000668   f002
00066a   8002     bsf	0x2, 0, 0            	BSF	r0x02, 0
00066c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00066e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000670   ec2e     call	0xe5c, 0            	CALL	_output_flipped_digit
000672   f007
000674   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	101; display.c	output_digit(char_to_digit[d1] | dot1);
000676   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
000678   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00067a   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
00067c   6a02     clrf	0x2, 0              	CLRF	r0x02
00067e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000680   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
000682   6a03     clrf	0x3, 0              	CLRF	r0x03
000684   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000686   c001     movff	0x1, 0xff6         	MOVFF	r0x01, TBLPTRL
000688   fff6
00068a   c002     movff	0x2, 0xff7         	MOVFF	r0x02, TBLPTRH
00068c   fff7
00068e   c003     movff	0x3, 0xff8         	MOVFF	r0x03, TBLPTRU
000690   fff8
000692   0009     tblrd	*+                 	TBLRD*+	
000694   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
000696   f001
000698   0100     movlb	0                  	BANKSEL	_dot1
00069a   51e4     movf	0xe4, 0, 0x1        	MOVF	_dot1, W, B
00069c   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
00069e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a2   ecf3     call	0x9e6, 0            	CALL	_output_digit
0006a4   f004
0006a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	102; display.c	output_digit(char_to_digit[d0]);
0006a8   0ec0     movlw	0xc0               	MOVLW	LOW(_char_to_digit)
0006aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0006ac   0e0b     movlw	0xb                	MOVLW	HIGH(_char_to_digit)
0006ae   6a01     clrf	0x1, 0              	CLRF	r0x01
0006b0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006b2   0e00     movlw	0                  	MOVLW	UPPER(_char_to_digit)
0006b4   6a02     clrf	0x2, 0              	CLRF	r0x02
0006b6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006b8   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
0006ba   fff6
0006bc   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
0006be   fff7
0006c0   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
0006c2   fff8
0006c4   0009     tblrd	*+                 	TBLRD*+	
0006c6   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0006c8   f000
0006ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ce   ecf3     call	0x9e6, 0            	CALL	_output_digit
0006d0   f004
0006d2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	105; display.c	LATBbits.LATB4 = 1;
0006d4   888a     bsf	0x8a, 0x4, 0         	BSF	_LATBbits, 4
                                           ;	.line	106; display.c	LATBbits.LATB4 = 0;
0006d6   988a     bcf	0x8a, 0x4, 0         	BCF	_LATBbits, 4
0006d8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0006da   f007
0006dc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0006de   f006
0006e0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006e2   f005
0006e4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006e6   f004
0006e8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006ea   f003
0006ec   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006ee   f002
0006f0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006f2   f001
0006f4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006f6   f000
0006f8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0006fa   ffd9
0006fc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__output_flipped_digit	code
                                           _output_flipped_digit:
                                           ;	.line	83; display.c	void output_flipped_digit(uint8_t d){
000e5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e5e   ffe5
000e60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e62   ffd9
000e64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e66   ffe5
000e68   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e6a   ffe5
000e6c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e6e   ffe5
000e70   0e02     movlw	0x2                	MOVLW	0x02
000e72   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e74   f000
                                           ;	.line	85; display.c	((d & b(00011100)) << 3) |
000e76   0e1c     movlw	0x1c               	MOVLW	0x1c
000e78   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
000e7a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e7c   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000e7e   0b3e     andlw	0x3e               	ANDLW	0x3e
000e80   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e82   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000e84   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
                                           ;	.line	86; display.c	((d & b(11100000)) >> 3) |
000e86   0ee0     movlw	0xe0               	MOVLW	0xe0
000e88   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
000e8a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e8c   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000e8e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000e90   4401     rlncf	0x1, 0, 0          	RLNCF	r0x01, W
000e92   0b1f     andlw	0x1f               	ANDLW	0x1f
000e94   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
                                           ;	.line	87; display.c	((d & b(00000011))));
000e96   0e03     movlw	0x3                	MOVLW	0x03
000e98   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000e9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e9c   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000e9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ea0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ea2   ecf3     call	0x9e6, 0            	CALL	_output_digit
000ea4   f004
000ea6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ea8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000eaa   f002
000eac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000eae   f001
000eb0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000eb2   f000
000eb4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000eb6   ffd9
000eb8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__output_digit	code
                                           _output_digit:
                                           ;	.line	68; display.c	void output_digit(uint8_t d){
0009e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0009e8   ffe5
0009ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0009ec   ffd9
0009ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0009f0   ffe5
0009f2   0e02     movlw	0x2                	MOVLW	0x02
0009f4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0009f6   f000
                                           ;	.line	71; display.c	w.b = d;
0009f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009fa   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
0009fc   6fed     movwf	0xed, 0x1          	MOVWF	_output_digit_w_1_1, B
                                           ;	.line	73; display.c	output_digit_bit(0);
0009fe   a1ed     btfss	0xed, 0, 0x1       	BTFSS	_output_digit_w_1_1, 0, B
000a00   d002     bra	0xa06                	BRA	_00110_DS_
000a02   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a04   d001     bra	0xa08                	BRA	_00111_DS_
                                           _00110_DS_:
000a06   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00111_DS_:
000a08   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a0a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a0c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	74; display.c	output_digit_bit(1);
000a0e   a3ed     btfss	0xed, 0x1, 0x1     	BTFSS	_output_digit_w_1_1, 1, B
000a10   d002     bra	0xa16                	BRA	_00113_DS_
000a12   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a14   d001     bra	0xa18                	BRA	_00114_DS_
                                           _00113_DS_:
000a16   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00114_DS_:
000a18   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a1a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a1c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	75; display.c	output_digit_bit(2);
000a1e   a5ed     btfss	0xed, 0x2, 0x1     	BTFSS	_output_digit_w_1_1, 2, B
000a20   d002     bra	0xa26                	BRA	_00116_DS_
000a22   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a24   d001     bra	0xa28                	BRA	_00117_DS_
                                           _00116_DS_:
000a26   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00117_DS_:
000a28   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a2a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a2c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	76; display.c	output_digit_bit(3);
000a2e   a7ed     btfss	0xed, 0x3, 0x1     	BTFSS	_output_digit_w_1_1, 3, B
000a30   d002     bra	0xa36                	BRA	_00119_DS_
000a32   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a34   d001     bra	0xa38                	BRA	_00120_DS_
                                           _00119_DS_:
000a36   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00120_DS_:
000a38   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a3a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a3c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	77; display.c	output_digit_bit(4);
000a3e   a9ed     btfss	0xed, 0x4, 0x1     	BTFSS	_output_digit_w_1_1, 4, B
000a40   d002     bra	0xa46                	BRA	_00122_DS_
000a42   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a44   d001     bra	0xa48                	BRA	_00123_DS_
                                           _00122_DS_:
000a46   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00123_DS_:
000a48   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a4a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a4c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	78; display.c	output_digit_bit(5);
000a4e   abed     btfss	0xed, 0x5, 0x1     	BTFSS	_output_digit_w_1_1, 5, B
000a50   d002     bra	0xa56                	BRA	_00125_DS_
000a52   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a54   d001     bra	0xa58                	BRA	_00126_DS_
                                           _00125_DS_:
000a56   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00126_DS_:
000a58   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a5a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a5c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	79; display.c	output_digit_bit(6);
000a5e   aded     btfss	0xed, 0x6, 0x1     	BTFSS	_output_digit_w_1_1, 6, B
000a60   d002     bra	0xa66                	BRA	_00128_DS_
000a62   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a64   d001     bra	0xa68                	BRA	_00129_DS_
                                           _00128_DS_:
000a66   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00129_DS_:
000a68   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a6a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a6c   0100     movlb	0                  	BANKSEL	_output_digit_w_1_1
                                           ;	.line	80; display.c	output_digit_bit(7);
000a6e   afed     btfss	0xed, 0x7, 0x1     	BTFSS	_output_digit_w_1_1, 7, B
000a70   d002     bra	0xa76                	BRA	_00131_DS_
000a72   8489     bsf	0x89, 0x2, 0         	BSF	_LATAbits, 2
000a74   d001     bra	0xa78                	BRA	_00132_DS_
                                           _00131_DS_:
000a76   9489     bcf	0x89, 0x2, 0         	BCF	_LATAbits, 2
                                           _00132_DS_:
000a78   8689     bsf	0x89, 0x3, 0         	BSF	_LATAbits, 3
000a7a   9689     bcf	0x89, 0x3, 0         	BCF	_LATAbits, 3
000a7c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a7e   f000
000a80   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000a82   ffd9
000a84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_display__init_display	code
                                           _init_display:
                                           ;	.line	47; display.c	TRISAbits.TRISA1 = 1;
00110a   8292     bsf	0x92, 0x1, 0         	BSF	_TRISAbits, 1
                                           ;	.line	48; display.c	TRISAbits.TRISA2 = 0;
00110c   9492     bcf	0x92, 0x2, 0         	BCF	_TRISAbits, 2
                                           ;	.line	49; display.c	TRISAbits.TRISA3 = 0;
00110e   9692     bcf	0x92, 0x3, 0         	BCF	_TRISAbits, 3
                                           ;	.line	51; display.c	TRISBbits.TRISB3 = 0;
001110   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	52; display.c	TRISBbits.TRISB4 = 0;
001112   9893     bcf	0x93, 0x4, 0         	BCF	_TRISBbits, 4
                                           ;	.line	55; display.c	display_digits(8,8,8,8,8,8);
001114   0e08     movlw	0x8                	MOVLW	0x08
001116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00111e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001122   ecb9     call	0x572, 0            	CALL	_display_digits_real
001124   f002
001126   0e06     movlw	0x6                	MOVLW	0x06
001128   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00112a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _char_to_digit:
000bc0   60fc     cpfslt	0xfc, 0           	DB	0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe0, 0xfe, 0xe6, 0xee, 0x3e
000bc2   f2da     dw	0xf2da  ;unknown opcode 
000bc4   b666     btfsc	0x66, 0x3, 0       
000bc6   e0be     bz	0xb44                 
000bc8   e6fe     bn	0xbc6                 
000bca   3eee     incfsz	0xee, 0x1, 0      
000bcc   7a9c     btg	0x9c, 0x5, 0         	DB	0x9c, 0x7a, 0x9e, 0x8e, 0x00, 0x01
000bce   8e9e     bsf	0x9e, 0x7, 0         
000bd0   0100     movlb	0                  
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  690 (0x02b2) bytes ( 0.53%)
                                           ;           	  345 (0x0159) words
                                           ; udata size:	    1 (0x0001) bytes ( 1.56%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 23:52:52 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_ds3231
                                           	global _from_bcd
                                           	global _to_bcd
                                           	global _read_time_from_ds3231
                                           	global _write_time_to_ds3231
                                           	global _read_from_ds3231
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _time_trick_tics
                                           	extern _time_trick_secs
                                           	extern _time_trick_mins
                                           	extern _time_trick_hours
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_i2c
                                           	extern _i2c_reset
                                           	extern _i2c_start
                                           	extern _i2c_stop
                                           	extern _i2c_write
                                           	extern _i2c_read
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ds3231__write_time_to_ds3231	code
                                           _write_time_to_ds3231:
                                           ;	.line	63; ds3231.c	void write_time_to_ds3231(uint8_t addr){
000b26   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000b28   ffe5
000b2a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000b2c   ffd9
000b2e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b30   ffe5
000b32   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000b34   ffe5
000b36   0e02     movlw	0x2                	MOVLW	0x02
000b38   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000b3a   f000
                                           ;	.line	64; ds3231.c	i2c_reset();
000b3c   ecd9     call	0x11b2, 0           	CALL	_i2c_reset
000b3e   f008
                                           ;	.line	65; ds3231.c	i2c_start();
000b40   ecf4     call	0x11e8, 0           	CALL	_i2c_start
000b42   f008
                                           ;	.line	66; ds3231.c	i2c_write(slave_addr_write);
000b44   0ed0     movlw	0xd0               	MOVLW	0xd0
000b46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b48   ece0     call	0xfc0, 0            	CALL	_i2c_write
000b4a   f007
000b4c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	67; ds3231.c	i2c_write(addr);
000b4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b52   ece0     call	0xfc0, 0            	CALL	_i2c_write
000b54   f007
000b56   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	68; ds3231.c	if (addr == ds3231_write_secs)
000b58   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b5a   e10f     bnz	0xb7a                	BNZ	_00131_DS_
                                           ;	.line	69; ds3231.c	i2c_write(to_bcd(time_secs / secs_to_real_secs_divider));
000b5c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000b5e   0100     movlb	0                  	BANKSEL	_time_secs
000b60   31f2     rrcf	0xf2, 0, 0x1        	RRCF	_time_secs, W, B
000b62   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b64   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000b66   3201     rrcf	0x1, 0x1, 0         	RRCF	r0x01, F
000b68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b6c   eccb     call	0xd96, 0            	CALL	_to_bcd
000b6e   f006
000b70   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b74   ece0     call	0xfc0, 0            	CALL	_i2c_write
000b76   f007
000b78   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	70; ds3231.c	if (addr == ds3231_write_mins)
000b7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b7c   0a01     xorlw	0x1                	XORLW	0x01
000b7e   e10a     bnz	0xb94                	BNZ	_00133_DS_
                                           _00142_DS_:
000b80   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	71; ds3231.c	i2c_write(to_bcd(time_mins));
000b82   51f0     movf	0xf0, 0, 0x1        	MOVF	_time_mins, W, B
000b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b86   eccb     call	0xd96, 0            	CALL	_to_bcd
000b88   f006
000b8a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000b8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b8e   ece0     call	0xfc0, 0            	CALL	_i2c_write
000b90   f007
000b92   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00133_DS_:
                                           ;	.line	72; ds3231.c	if (addr == ds3231_write_hours)
000b94   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b96   0a02     xorlw	0x2                	XORLW	0x02
000b98   e10a     bnz	0xbae                	BNZ	_00135_DS_
                                           _00144_DS_:
000b9a   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	73; ds3231.c	i2c_write(to_bcd(time_hours));
000b9c   51ee     movf	0xee, 0, 0x1        	MOVF	_time_hours, W, B
000b9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba0   eccb     call	0xd96, 0            	CALL	_to_bcd
000ba2   f006
000ba4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ba6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ba8   ece0     call	0xfc0, 0            	CALL	_i2c_write
000baa   f007
000bac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00135_DS_:
                                           ;	.line	74; ds3231.c	i2c_stop();
000bae   ec02     call	0x1204, 0           	CALL	_i2c_stop
000bb0   f009
000bb2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000bb4   f001
000bb6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000bb8   f000
000bba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000bbc   ffd9
000bbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_time_from_ds3231	code
                                           _read_time_from_ds3231:
                                           ;	.line	54; ds3231.c	void read_time_from_ds3231(){
00091c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00091e   ffe5
000920   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000922   ffe5
                                           ;	.line	55; ds3231.c	time_secs = from_bcd(read_from_ds3231(ds3231_write_secs)) * secs_to_real_secs_divider;
000924   0e00     movlw	0                  	MOVLW	0x00
000926   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000928   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
00092a   f007
00092c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00092e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000930   ec08     call	0x1010, 0           	CALL	_from_bcd
000932   f008
000934   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable r0x00 and store in _time_secs
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000936   0d04     mullw	0x4                	MULLW	0x04
000938   cff3     movff	0xff3, 0xf2        	MOVFF	PRODL, _time_secs
00093a   f0f2
                                           ;	.line	56; ds3231.c	time_mins = from_bcd(read_from_ds3231(ds3231_write_mins));
00093c   0e01     movlw	0x1                	MOVLW	0x01
00093e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000940   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
000942   f007
000944   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000946   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000948   ec08     call	0x1010, 0           	CALL	_from_bcd
00094a   f008
00094c   0100     movlb	0                  	BANKSEL	_time_mins
00094e   6ff0     movwf	0xf0, 0x1          	MOVWF	_time_mins, B
000950   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	57; ds3231.c	time_hours = from_bcd(read_from_ds3231(ds3231_write_hours));
000952   0e02     movlw	0x2                	MOVLW	0x02
000954   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000956   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
000958   f007
00095a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00095c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00095e   ec08     call	0x1010, 0           	CALL	_from_bcd
000960   f008
000962   0100     movlb	0                  	BANKSEL	_time_hours
000964   6fee     movwf	0xee, 0x1          	MOVWF	_time_hours, B
000966   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	60; ds3231.c	new_temp_sample(read_from_ds3231(0x11));
000968   0e11     movlw	0x11               	MOVLW	0x11
00096a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00096c   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
00096e   f007
000970   6e00     movwf	0, 0               	MOVWF	r0x00
000972   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000974   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
000976   51d0     movf	0xd0, 0, 0x1        	MOVF	(_eeprom_data + 16), W, B
000978   0f80     addlw	0x80               	ADDLW	0x80
00097a   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00097c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00097e   0f80     addlw	0x80               	ADDLW	0x80
000980   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
000982   e20e     bc	0x9a0                 	BC	_00122_DS_
000984   0e11     movlw	0x11               	MOVLW	0x11
000986   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000988   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
00098a   f007
00098c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00098e   6a01     clrf	0x1, 0              	CLRF	r0x01
000990   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
000992   6fd0     movwf	0xd0, 0x1          	MOVWF	(_eeprom_data + 16), B
000994   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000996   6bd1     clrf	0xd1, 0x1           	CLRF	(_eeprom_data + 17), B
                                           ; removed redundant BANKSEL
000998   6bd2     clrf	0xd2, 0x1           	CLRF	(_eeprom_data + 18), B
                                           ; removed redundant BANKSEL
00099a   6bd3     clrf	0xd3, 0x1           	CLRF	(_eeprom_data + 19), B
00099c   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
00099e   f009
                                           _00122_DS_:
0009a0   0e11     movlw	0x11               	MOVLW	0x11
0009a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009a4   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
0009a6   f007
0009a8   6e00     movwf	0, 0               	MOVWF	r0x00
0009aa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0009ac   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
0009ae   51d4     movf	0xd4, 0, 0x1        	MOVF	(_eeprom_data + 20), W, B
0009b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009b4   0f80     addlw	0x80               	ADDLW	0x80
0009b6   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0009b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009ba   0f80     addlw	0x80               	ADDLW	0x80
0009bc   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0009be   e20e     bc	0x9dc                 	BC	_00125_DS_
0009c0   0e11     movlw	0x11               	MOVLW	0x11
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   ec5d     call	0xeba, 0            	CALL	_read_from_ds3231
0009c6   f007
0009c8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0009ca   6a01     clrf	0x1, 0              	CLRF	r0x01
0009cc   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
0009ce   6fd4     movwf	0xd4, 0x1          	MOVWF	(_eeprom_data + 20), B
0009d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0009d2   6bd5     clrf	0xd5, 0x1           	CLRF	(_eeprom_data + 21), B
                                           ; removed redundant BANKSEL
0009d4   6bd6     clrf	0xd6, 0x1           	CLRF	(_eeprom_data + 22), B
                                           ; removed redundant BANKSEL
0009d6   6bd7     clrf	0xd7, 0x1           	CLRF	(_eeprom_data + 23), B
0009d8   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
0009da   f009
                                           _00125_DS_:
0009dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0009de   f001
0009e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0009e2   f000
0009e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_from_ds3231	code
                                           _read_from_ds3231:
                                           ;	.line	41; ds3231.c	uint8_t read_from_ds3231(uint8_t addr){
000eba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ebc   ffe5
000ebe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ec0   ffd9
000ec2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ec4   ffe5
000ec6   0e02     movlw	0x2                	MOVLW	0x02
000ec8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000eca   f000
                                           ;	.line	43; ds3231.c	i2c_reset();
000ecc   ecd9     call	0x11b2, 0           	CALL	_i2c_reset
000ece   f008
                                           ;	.line	44; ds3231.c	i2c_start();
000ed0   ecf4     call	0x11e8, 0           	CALL	_i2c_start
000ed2   f008
                                           ;	.line	45; ds3231.c	i2c_write(slave_addr_write);
000ed4   0ed0     movlw	0xd0               	MOVLW	0xd0
000ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed8   ece0     call	0xfc0, 0            	CALL	_i2c_write
000eda   f007
000edc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	46; ds3231.c	i2c_write(addr);
000ede   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee2   ece0     call	0xfc0, 0            	CALL	_i2c_write
000ee4   f007
000ee6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	47; ds3231.c	i2c_start();
000ee8   ecf4     call	0x11e8, 0           	CALL	_i2c_start
000eea   f008
                                           ;	.line	48; ds3231.c	i2c_write(slave_addr_read);
000eec   0ed1     movlw	0xd1               	MOVLW	0xd1
000eee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef0   ece0     call	0xfc0, 0            	CALL	_i2c_write
000ef2   f007
000ef4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	49; ds3231.c	r = i2c_read(true);
000ef6   0e01     movlw	0x1                	MOVLW	0x01
000ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efa   ecfe     call	0xdfc, 0            	CALL	_i2c_read
000efc   f006
000efe   6e00     movwf	0, 0               	MOVWF	r0x00
000f00   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	50; ds3231.c	i2c_stop();
000f02   ec02     call	0x1204, 0           	CALL	_i2c_stop
000f04   f009
                                           ;	.line	51; ds3231.c	return r;
000f06   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f08   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f0a   f000
000f0c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f0e   ffd9
000f10   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__to_bcd	code
                                           _to_bcd:
                                           ;	.line	37; ds3231.c	uint8_t to_bcd(uint8_t d){
000d96   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d98   ffe5
000d9a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d9c   ffd9
000d9e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000da0   ffe5
000da2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000da4   ffe5
000da6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000da8   ffe5
000daa   0e02     movlw	0x2                	MOVLW	0x02
000dac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000dae   f000
                                           ;	.line	38; ds3231.c	return (((d / 10) << 4) & b(11110000)) | ((d % 10) & b(00001111));
000db0   0e0a     movlw	0xa                	MOVLW	0x0a
000db2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000db4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000db6   ffe5
000db8   ec94     call	0xd28, 0            	CALL	__divuchar
000dba   f006
000dbc   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dbe   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dc0   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dc2   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000dc4   0bf0     andlw	0xf0               	ANDLW	0xf0
000dc6   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dc8   0ef0     movlw	0xf0               	MOVLW	0xf0
000dca   1402     andwf	0x2, 0, 0          	ANDWF	r0x02, W
000dcc   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dce   0e0a     movlw	0xa                	MOVLW	0x0a
000dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dd4   ffe5
000dd6   ec21     call	0xc42, 0            	CALL	__moduchar
000dd8   f006
000dda   6e00     movwf	0, 0               	MOVWF	r0x00
000ddc   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dde   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000de0   0e0f     movlw	0xf                	MOVLW	0x0f
000de2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000de4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000de6   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
000de8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dea   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000dec   f002
000dee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000df0   f001
000df2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000df4   f000
000df6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000df8   ffd9
000dfa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__from_bcd	code
                                           _from_bcd:
                                           ;	.line	33; ds3231.c	uint8_t from_bcd(uint8_t d){
001010   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001012   ffe5
001014   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001016   ffd9
001018   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00101a   ffe5
00101c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00101e   ffe5
001020   0e02     movlw	0x2                	MOVLW	0x02
001022   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001024   f000
                                           ;	.line	34; ds3231.c	return (d & b(00001111)) + (((d & b(11110000)) >> 4) * 10);
001026   0e0f     movlw	0xf                	MOVLW	0x0f
001028   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
00102a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00102c   0ef0     movlw	0xf0               	MOVLW	0xf0
00102e   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
001030   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
001032   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x0a by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001034   0d0a     mullw	0xa                	MULLW	0x0a
001036   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
001038   f000
00103a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00103c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00103e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001040   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001042   f001
001044   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001046   f000
001048   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00104a   ffd9
00104c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__init_ds3231	code
                                           _init_ds3231:
                                           ;	.line	30; ds3231.c	init_i2c();
001214   ecf9     call	0x11f2, 0           	CALL	_init_i2c
001216   f008
001218   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  614 (0x0266) bytes ( 0.47%)
                                           ;           	  307 (0x0133) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_eeprom
                                           	global _save_eeprom_if_needed
                                           	global _trigger_save_eeprom
                                           	global _save_eeprom_fully
                                           	global _eeprom_data
                                           	global _incremental_save_counter
                                           	global _do_eeprom_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _incremental_save_counter	db	0x24
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_eeprom_0	udata
                                           _eeprom_data	res	36
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_fully	code
                                           _save_eeprom_fully:
001166   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	74; eeprom.c	incremental_save_counter = 0;
001168   6be5     clrf	0xe5, 0x1           	CLRF	_incremental_save_counter, B
                                           _00130_DS_:
                                           ;	.line	75; eeprom.c	while (incremental_save_counter < sizeof(eeprom_data)){
00116a   0e24     movlw	0x24               	MOVLW	0x24
00116c   0100     movlb	0                  	BANKSEL	_incremental_save_counter
00116e   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
001170   e203     bc	0x1178                	BC	_00133_DS_
                                           ;	.line	76; eeprom.c	save_eeprom_if_needed();
001172   ec5b     call	0xcb6, 0            	CALL	_save_eeprom_if_needed
001174   f006
001176   d7f9     bra	0x116a               	BRA	_00130_DS_
                                           _00133_DS_:
001178   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__trigger_save_eeprom	code
                                           _trigger_save_eeprom:
00121a   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	70; eeprom.c	incremental_save_counter = 0;
00121c   6be5     clrf	0xe5, 0x1           	CLRF	_incremental_save_counter, B
00121e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_if_needed	code
                                           _save_eeprom_if_needed:
                                           ;	.line	45; eeprom.c	void save_eeprom_if_needed(){
000cb6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000cb8   ffe5
000cba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000cbc   ffd9
000cbe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cc0   ffe5
000cc2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000cc4   ffe5
000cc6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000cc8   ffe5
                                           ;	.line	46; eeprom.c	if ((incremental_save_counter < sizeof(eeprom_data))
000cca   0e24     movlw	0x24               	MOVLW	0x24
000ccc   0100     movlb	0                  	BANKSEL	_incremental_save_counter
000cce   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
000cd0   e222     bc	0xd16                 	BC	_00121_DS_
                                           ;	.line	47; eeprom.c	&& !EECON1bits.WR){ // Is previous write complete?
000cd2   b2a6     btfsc	0xa6, 0x1, 0       	BTFSC	_EECON1bits, 1
000cd4   d020     bra	0xd16                	BRA	_00121_DS_
                                           ;	.line	48; eeprom.c	EEADR = incremental_save_counter;
000cd6   c0e5     movff	0xe5, 0xfa9        	MOVFF	_incremental_save_counter, _EEADR
000cd8   ffa9
                                           ;	.line	50; eeprom.c	EEDATA = ((uint8_t *)(&eeprom_data))[EEADR];
000cda   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000cdc   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cde   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000ce0   6e00     movwf	0, 0               	MOVWF	r0x00
000ce2   0e80     movlw	0x80               	MOVLW	0x80
000ce4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ce6   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000ce8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cea   6ae8     clrf	0xe8, 0             	CLRF	WREG
000cec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000cee   6ae8     clrf	0xe8, 0             	CLRF	WREG
000cf0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cf2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000cf4   ffe9
000cf6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000cf8   fff3
000cfa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cfc   ec96     call	0x112c, 0           	CALL	__gptrget1
000cfe   f008
000d00   6ea8     movwf	0xa8, 0            	MOVWF	_EEDATA
                                           ;	.line	52; eeprom.c	EECON1bits.EEPGD = 0;
000d02   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	53; eeprom.c	EECON1bits.CFGS = 0;
000d04   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	54; eeprom.c	EECON1bits.WREN = 1;
000d06   84a6     bsf	0xa6, 0x2, 0         	BSF	_EECON1bits, 2
000d08   0e55     movlw	0x55               	movlw 0x55
000d0a   6ea7     movwf	0xa7, 0            	movwf _EECON2
000d0c   0eaa     movlw	0xaa               	movlw 0xAA
000d0e   6ea7     movwf	0xa7, 0            	movwf _EECON2
000d10   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1,1
                                           	
000d12   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	65; eeprom.c	incremental_save_counter++;
000d14   2be5     incf	0xe5, 0x1, 0x1      	INCF	_incremental_save_counter, F, B
                                           _00121_DS_:
000d16   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d18   f002
000d1a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d1c   f001
000d1e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d20   f000
000d22   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d24   ffd9
000d26   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__init_eeprom	code
                                           _init_eeprom:
                                           ;	.line	34; eeprom.c	void init_eeprom(){
000f6a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f6c   ffe5
000f6e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f70   ffe5
000f72   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f74   ffe5
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f76   6aa9     clrf	0xa9, 0             	CLRF	_EEADR
                                           _00109_DS_:
000f78   0e24     movlw	0x24               	MOVLW	0x24
000f7a   5ca9     subwf	0xa9, 0, 0         	SUBWF	_EEADR, W
000f7c   e21a     bc	0xfb2                 	BC	_00113_DS_
                                           ;	.line	36; eeprom.c	EECON1bits.EEPGD = 0;
000f7e   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	37; eeprom.c	EECON1bits.CFGS = 0;
000f80   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	38; eeprom.c	EECON1bits.RD = 1;
000f82   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
                                           ;	.line	39; eeprom.c	((uint8_t *)(&eeprom_data))[EEADR] = EEDATA;
000f84   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000f86   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f88   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000f8a   6e00     movwf	0, 0               	MOVWF	r0x00
000f8c   0e80     movlw	0x80               	MOVLW	0x80
000f8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f90   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000f92   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f94   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f96   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f98   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f9a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f9c   cfa8     movff	0xfa8, 0xfe5       	MOVFF	_EEDATA, POSTDEC1
000f9e   ffe5
000fa0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000fa2   ffe9
000fa4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000fa6   fff3
000fa8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000faa   ecc7     call	0x118e, 0           	CALL	__gptrput1
000fac   f008
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000fae   2aa9     incf	0xa9, 0x1, 0        	INCF	_EEADR, F
000fb0   d7e3     bra	0xf78                	BRA	_00109_DS_
                                           _00113_DS_:
000fb2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000fb4   f002
000fb6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fb8   f001
000fba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fbc   f000
000fbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__do_eeprom_read	code
                                           _do_eeprom_read:
                                           ;	.line	29; eeprom.c	EECON1bits.EEPGD = 0;
0011fc   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	30; eeprom.c	EECON1bits.CFGS = 0;
0011fe   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	31; eeprom.c	EECON1bits.RD = 1;
001200   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
001202   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  236 (0x00ec) bytes ( 0.18%)
                                           ;           	  118 (0x0076) words
                                           ; udata size:	   36 (0x0024) bytes (56.25%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_i2c
                                           	global _i2c_reset
                                           	global _i2c_start
                                           	global _i2c_stop
                                           	global _i2c_write
                                           	global _i2c_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_i2c__i2c_read	code
                                           _i2c_read:
                                           ;	.line	89; i2c.c	uint8_t i2c_read(bool ack){
000dfc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dfe   ffe5
000e00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e02   ffd9
000e04   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e06   ffe5
000e08   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e0a   ffe5
000e0c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e0e   ffe5
000e10   0e02     movlw	0x2                	MOVLW	0x02
000e12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e14   f000
                                           ;	.line	90; i2c.c	uint8_t i, d = 0;
000e16   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	91; i2c.c	i2c_sda = 1; 
000e18   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e1a   0e08     movlw	0x8                	MOVLW	0x08
000e1c   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00151_DS_:
000e1e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e20   e00b     bz	0xe38                 	BZ	_00154_DS_
                                           ;	.line	94; i2c.c	d <<= 1;
000e22   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e24   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           _00143_DS_:
                                           ;	.line	96; i2c.c	i2c_scl = 1;
000e26   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	98; i2c.c	while(i2c_scl_in == 0); // wait for any i2c_scl clock stretching to complete
000e28   a081     btfss	0x81, 0, 0         	BTFSS	_PORTBbits, 0
000e2a   d7fd     bra	0xe26                	BRA	_00143_DS_
                                           ;	.line	100; i2c.c	if (i2c_sda_in)
000e2c   a281     btfss	0x81, 0x1, 0       	BTFSS	_PORTBbits, 1
000e2e   d001     bra	0xe32                	BRA	_00147_DS_
                                           ;	.line	101; i2c.c	d |= 1;
000e30   8001     bsf	0x1, 0, 0            	BSF	r0x01, 0
                                           _00147_DS_:
                                           ;	.line	102; i2c.c	i2c_scl = 0;
000e32   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e34   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
000e36   d7f3     bra	0xe1e                	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	105; i2c.c	if (ack)
000e38   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e3a   e002     bz	0xe40                 	BZ	_00149_DS_
                                           ;	.line	106; i2c.c	i2c_sda = 0;
000e3c   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
000e3e   d001     bra	0xe42                	BRA	_00150_DS_
                                           _00149_DS_:
                                           ;	.line	108; i2c.c	i2c_sda = 1;
000e40   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           _00150_DS_:
                                           ;	.line	111; i2c.c	i2c_scl = 1;
000e42   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	113; i2c.c	i2c_scl = 0;
000e44   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	115; i2c.c	i2c_sda = 1;
000e46   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	117; i2c.c	return d;
000e48   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e4a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e4c   f002
000e4e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e50   f001
000e52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e54   f000
000e56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e58   ffd9
000e5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_write	code
                                           _i2c_write:
                                           ;	.line	59; i2c.c	bool i2c_write(uint8_t d){
000fc0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000fc2   ffe5
000fc4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fc6   ffd9
000fc8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fca   ffe5
000fcc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000fce   ffe5
000fd0   0e02     movlw	0x2                	MOVLW	0x02
000fd2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fd4   f000
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
000fd6   0e08     movlw	0x8                	MOVLW	0x08
000fd8   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00128_DS_:
000fda   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fdc   e00b     bz	0xff4                 	BZ	_00131_DS_
                                           ;	.line	64; i2c.c	if(d & b(10000000))
000fde   ae00     btfss	0, 0x7, 0          	BTFSS	r0x00, 7
000fe0   d002     bra	0xfe6                	BRA	_00126_DS_
                                           ;	.line	65; i2c.c	i2c_sda = 1;
000fe2   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
000fe4   d001     bra	0xfe8                	BRA	_00127_DS_
                                           _00126_DS_:
                                           ;	.line	67; i2c.c	i2c_sda = 0;
000fe6   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           _00127_DS_:
                                           ;	.line	70; i2c.c	i2c_scl = 1;
000fe8   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	72; i2c.c	i2c_scl = 0;
000fea   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	74; i2c.c	d <<= 1;
000fec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fee   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
000ff0   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000ff2   d7f3     bra	0xfda                	BRA	_00128_DS_
                                           _00131_DS_:
                                           ;	.line	78; i2c.c	i2c_sda = 1;
000ff4   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	80; i2c.c	i2c_scl = 1;
000ff6   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	83; i2c.c	b = i2c_sda_in; // possible ACK bit
000ff8   6a00     clrf	0, 0                	CLRF	r0x00
000ffa   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
000ffc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	84; i2c.c	i2c_scl = 0;
000ffe   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	86; i2c.c	return b;
001000   5000     movf	0, 0, 0             	MOVF	r0x00, W
001002   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001004   f001
001006   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001008   f000
00100a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00100c   ffd9
00100e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_stop	code
                                           _i2c_stop:
                                           ;	.line	51; i2c.c	i2c_sda = 0; 
001204   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	53; i2c.c	i2c_scl = 1;
001206   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	55; i2c.c	i2c_sda = 1;
001208   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
00120a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_start	code
                                           _i2c_start:
                                           ;	.line	40; i2c.c	i2c_sda = 1;
0011e8   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	42; i2c.c	i2c_scl = 1;
0011ea   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
                                           ;	.line	44; i2c.c	i2c_sda = 0;
0011ec   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	46; i2c.c	i2c_scl = 0;
0011ee   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
0011f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_reset	code
                                           _i2c_reset:
                                           ;	.line	30; i2c.c	i2c_sda = 1;
0011b2   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           _00109_DS_:
                                           ;	.line	31; i2c.c	while (!i2c_sda_in){
0011b4   b281     btfsc	0x81, 0x1, 0       	BTFSC	_PORTBbits, 1
0011b6   d003     bra	0x11be               	BRA	_00112_DS_
                                           ;	.line	32; i2c.c	i2c_scl = 0;
0011b8   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	34; i2c.c	i2c_scl = 1;
0011ba   8093     bsf	0x93, 0, 0           	BSF	_TRISBbits, 0
0011bc   d7fb     bra	0x11b4               	BRA	_00109_DS_
                                           _00112_DS_:
0011be   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__init_i2c	code
                                           _init_i2c:
                                           ;	.line	24; i2c.c	LATBbits.LATB0 = 0;
0011f2   908a     bcf	0x8a, 0, 0           	BCF	_LATBbits, 0
                                           ;	.line	25; i2c.c	LATBbits.LATB1 = 0;
0011f4   928a     bcf	0x8a, 0x1, 0         	BCF	_LATBbits, 1
                                           ;	.line	26; i2c.c	i2c_stop();
0011f6   ec02     call	0x1204, 0           	CALL	_i2c_stop
0011f8   f009
0011fa   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  218 (0x00da) bytes ( 0.17%)
                                           ;           	  109 (0x006d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _main_loop
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _dot1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_loop__main_loop	code
                                           _main_loop:
                                           _00106_DS_:
                                           ;	.line	25; loop.c	while (1){
001224   d7ff     bra	0x1224               	BRA	_00106_DS_
001226   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    4 (0x0004) bytes ( 0.00%)
                                           ;           	    2 (0x0002) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 23:52:52 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           	__config 0x300001, 0xf8
                                           	__config 0x300002, 0xf2
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0xff
                                           	__config 0x300006, 0xfa
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global ___ivt_high_int
                                           	global _high_int
                                           	global __tmr0_handler
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _time_trick_tics
                                           	extern _time_trick_secs
                                           	extern _time_trick_mins
                                           	extern _time_trick_hours
                                           	extern _mode
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _main_loop
                                           	extern _init_time
                                           	extern _do_time
                                           	extern _init_user
                                           	extern _do_user
                                           	extern _init_eeprom
                                           	extern _save_eeprom_if_needed
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ustat_main_00	udata	0X0080
                                           _stack	res	63
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main____ivt_high_int	code	0X000008
                                           ___ivt_high_int:
                                           	
000008   ef06     goto	0x120c              	goto _high_int 
00000a   f009
                                           	
                                           ; ; Starting pCode block
                                           S_main__high_int	code
                                           _high_int:
00120c   b4f2     btfsc	0xf2, 0x2, 0       	btfsc _INTCON, 2 
00120e   ef89     goto	0xf12               	goto __tmr0_handler
001210   f007
001212   0010     retfie	0                 	retfie 
                                           	
                                           ; ; Starting pCode block
                                           S_main___tmr0_handler	code
                                           __tmr0_handler:
                                           ;	.line	53; main.c	SIGHANDLER(_tmr0_handler)
000f12   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000f14   ffe5
000f16   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000f18   ffe5
000f1a   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000f1c   ffe5
000f1e   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000f20   ffe5
000f22   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000f24   ffe5
000f26   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000f28   ffe5
000f2a   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000f2c   ffe5
000f2e   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000f30   ffe5
000f32   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000f34   ffe5
                                           ;	.line	56; main.c	do_time();
000f36   ec13     call	0x826, 0            	CALL	_do_time
000f38   f004
                                           ;	.line	57; main.c	do_user();
000f3a   ece0     call	0x11c0, 0           	CALL	_do_user
000f3c   f008
                                           ;	.line	59; main.c	save_eeprom_if_needed();
000f3e   ec5b     call	0xcb6, 0            	CALL	_save_eeprom_if_needed
000f40   f006
                                           ;	.line	62; main.c	INTCONbits.T0IF = 0;
000f42   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
000f44   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000f46   fffb
000f48   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000f4a   fffa
000f4c   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000f4e   ffea
000f50   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000f52   ffe9
000f54   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000f56   fff4
000f58   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000f5a   fff3
000f5c   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000f5e   ffe0
000f60   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000f62   ffd8
000f64   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000f66   ffe8
000f68   0010     retfie	0                 	RETFIE	
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	67; main.c	OSCCON = b(01000000);
00104e   0e40     movlw	0x40               	MOVLW	0x40
001050   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           ;	.line	74; main.c	TRISA = 0x00;
001052   6a92     clrf	0x92, 0             	CLRF	_TRISA
                                           ;	.line	75; main.c	TRISB = 0x00;
001054   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           ;	.line	78; main.c	ADCON1 = 0x7F;
001056   0e7f     movlw	0x7f               	MOVLW	0x7f
001058   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	81; main.c	init_eeprom();
00105a   ecb5     call	0xf6a, 0            	CALL	_init_eeprom
00105c   f007
                                           ;	.line	82; main.c	init_time();
00105e   ecd1     call	0x11a2, 0           	CALL	_init_time
001060   f008
                                           ;	.line	83; main.c	init_user();
001062   ec81     call	0x302, 0            	CALL	_init_user
001064   f001
                                           ;	.line	86; main.c	init_eeprom();
001066   ecb5     call	0xf6a, 0            	CALL	_init_eeprom
001068   f007
                                           ;	.line	87; main.c	init_time();
00106a   ecd1     call	0x11a2, 0           	CALL	_init_time
00106c   f008
                                           ;	.line	88; main.c	init_user();
00106e   ec81     call	0x302, 0            	CALL	_init_user
001070   f001
                                           ;	.line	91; main.c	INTCONbits.T0IF = 0;
001072   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	92; main.c	INTCONbits.T0IE = 1;
001074   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	93; main.c	INTCONbits.GIE = 1;
001076   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	94; main.c	T0CON = b(11100000); 
001078   0ee0     movlw	0xe0               	MOVLW	0xe0
00107a   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	97; main.c	main_loop();
00107c   ec12     call	0x1224, 0           	CALL	_main_loop
00107e   f009
001080   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  154 (0x009a) bytes ( 0.12%)
                                           ;           	   77 (0x004d) words
                                           ; udata size:	   64 (0x0040) bytes (100.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 20:41:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 23:52:52 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_time
                                           	global _inc_hours
                                           	global _dec_hours
                                           	global _inc_mins
                                           	global _clear_secs
                                           	global _do_time
                                           	global _time_tics
                                           	global _time_secs
                                           	global _time_mins
                                           	global _time_hours
                                           	global _time_trick_tics
                                           	global _time_trick_secs
                                           	global _time_trick_mins
                                           	global _time_trick_hours
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _mode
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay100ktcy
                                           	extern _init_ds3231
                                           	extern _read_time_from_ds3231
                                           	extern _write_time_to_ds3231
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_time_0	udata
                                           _time_hours	res	1
                                           
                                           udata_time_1	udata
                                           _time_trick_hours	res	1
                                           
                                           udata_time_2	udata
                                           _time_mins	res	1
                                           
                                           udata_time_3	udata
                                           _time_trick_mins	res	1
                                           
                                           udata_time_4	udata
                                           _time_secs	res	1
                                           
                                           udata_time_5	udata
                                           _time_tics	res	1
                                           
                                           udata_time_6	udata
                                           _time_trick_tics	res	1
                                           
                                           udata_time_7	udata
                                           _time_trick_secs	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__do_time	code
                                           _do_time:
                                           ;	.line	93; time.c	void do_time(){
000826   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000828   ffe5
00082a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00082c   ffe5
00082e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000830   ffe5
000832   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000834   ffe5
000836   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	95; time.c	time_tics++;
000838   2bf3     incf	0xf3, 0x1, 0x1      	INCF	_time_tics, F, B
                                           ;	.line	97; time.c	if (time_tics == num_time_tics){
00083a   51f3     movf	0xf3, 0, 0x1        	MOVF	_time_tics, W, B
00083c   0a10     xorlw	0x10               	XORLW	0x10
00083e   e001     bz	0x842                 	BZ	_00186_DS_
000840   d04b     bra	0x8d8                	BRA	_00163_DS_
                                           _00186_DS_:
000842   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	98; time.c	time_tics = 0;
000844   6bf3     clrf	0xf3, 0x1           	CLRF	_time_tics, B
000846   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	101; time.c	if (!(time_secs % secs_to_real_secs_divider))
000848   51f2     movf	0xf2, 0, 0x1        	MOVF	_time_secs, W, B
00084a   0b03     andlw	0x3                	ANDLW	0x03
00084c   e118     bnz	0x87e                	BNZ	_00150_DS_
                                           ;	.line	102; time.c	inc_metric_running_time();
00084e   c0c0     movff	0xc0, 0            	MOVFF	_eeprom_data, r0x00
000850   f000
000852   c0c1     movff	0xc1, 0x1          	MOVFF	(_eeprom_data + 1), r0x01
000854   f001
000856   c0c2     movff	0xc2, 0x2          	MOVFF	(_eeprom_data + 2), r0x02
000858   f002
00085a   c0c3     movff	0xc3, 0x3          	MOVFF	(_eeprom_data + 3), r0x03
00085c   f003
00085e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000860   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000866   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000868   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00086a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00086c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00086e   0100     movlb	0                  	BANKSEL	_eeprom_data
000870   6fc0     movwf	0xc0, 0x1          	MOVWF	_eeprom_data, B
000872   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000874   6fc1     movwf	0xc1, 0x1          	MOVWF	(_eeprom_data + 1), B
000876   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000878   6fc2     movwf	0xc2, 0x1          	MOVWF	(_eeprom_data + 2), B
00087a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
00087c   6fc3     movwf	0xc3, 0x1          	MOVWF	(_eeprom_data + 3), B
                                           _00150_DS_:
00087e   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	104; time.c	time_secs++;
000880   2bf2     incf	0xf2, 0x1, 0x1      	INCF	_time_secs, F, B
                                           ;	.line	105; time.c	if (time_secs >= num_time_secs){
000882   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000884   5df2     subwf	0xf2, 0, 0x1       	SUBWF	_time_secs, W, B
000886   e328     bnc	0x8d8                	BNC	_00163_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	106; time.c	time_secs = 0;
000888   6bf2     clrf	0xf2, 0x1           	CLRF	_time_secs, B
                                           ;	.line	111; time.c	old_time_hours = time_hours;
00088a   c0ee     movff	0xee, 0            	MOVFF	_time_hours, r0x00
00088c   f000
                                           ;	.line	112; time.c	old_time_mins = time_mins;
00088e   c0f0     movff	0xf0, 0x1          	MOVFF	_time_mins, r0x01
000890   f001
                                           ;	.line	113; time.c	old_time_secs = time_secs;
000892   c0f2     movff	0xf2, 0x2          	MOVFF	_time_secs, r0x02
000894   f002
                                           ;	.line	114; time.c	read_time_from_ds3231();
000896   ec8e     call	0x91c, 0            	CALL	_read_time_from_ds3231
000898   f004
00089a   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	118; time.c	if (time_secs){
00089c   51f2     movf	0xf2, 0, 0x1        	MOVF	_time_secs, W, B
00089e   e008     bz	0x8b0                 	BZ	_00155_DS_
                                           ;	.line	119; time.c	if (time_secs > num_time_secs / 2){
0008a0   0e79     movlw	0x79               	MOVLW	0x79
                                           ; removed redundant BANKSEL
0008a2   5df2     subwf	0xf2, 0, 0x1       	SUBWF	_time_secs, W, B
0008a4   e303     bnc	0x8ac                	BNC	_00152_DS_
0008a6   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	121; time.c	time_tics--;
0008a8   07f3     decf	0xf3, 0x1, 0x1      	DECF	_time_tics, F, B
0008aa   d002     bra	0x8b0                	BRA	_00155_DS_
                                           _00152_DS_:
0008ac   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	124; time.c	time_tics++;
0008ae   2bf3     incf	0xf3, 0x1, 0x1      	INCF	_time_tics, F, B
                                           _00155_DS_:
                                           ;	.line	128; time.c	time_hours = old_time_hours;
0008b0   c000     movff	0, 0xee            	MOVFF	r0x00, _time_hours
0008b2   f0ee
                                           ;	.line	129; time.c	time_mins = old_time_mins;
0008b4   c001     movff	0x1, 0xf0          	MOVFF	r0x01, _time_mins
0008b6   f0f0
                                           ;	.line	130; time.c	time_secs = old_time_secs;
0008b8   c002     movff	0x2, 0xf2          	MOVFF	r0x02, _time_secs
0008ba   f0f2
0008bc   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	132; time.c	time_mins++;
0008be   2bf0     incf	0xf0, 0x1, 0x1      	INCF	_time_mins, F, B
                                           ;	.line	133; time.c	if (time_mins >= num_time_mins){
0008c0   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
0008c2   5df0     subwf	0xf0, 0, 0x1       	SUBWF	_time_mins, W, B
0008c4   e309     bnc	0x8d8                	BNC	_00163_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	134; time.c	time_mins = 0;
0008c6   6bf0     clrf	0xf0, 0x1           	CLRF	_time_mins, B
                                           ;	.line	139; time.c	save_metrics();
0008c8   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
0008ca   f009
0008cc   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	141; time.c	time_hours++;
0008ce   2bee     incf	0xee, 0x1, 0x1      	INCF	_time_hours, F, B
                                           ;	.line	142; time.c	if (time_hours >= num_time_hours){
0008d0   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
0008d2   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
0008d4   e301     bnc	0x8d8                	BNC	_00163_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	143; time.c	time_hours = 0;
0008d6   6bee     clrf	0xee, 0x1           	CLRF	_time_hours, B
                                           _00163_DS_:
0008d8   0100     movlb	0                  	BANKSEL	_time_trick_tics
                                           ;	.line	150; time.c	time_trick_tics++;
0008da   2bf4     incf	0xf4, 0x1, 0x1      	INCF	_time_trick_tics, F, B
                                           ;	.line	152; time.c	if (time_trick_tics == (num_time_tics / 2)){
0008dc   51f4     movf	0xf4, 0, 0x1        	MOVF	_time_trick_tics, W, B
0008de   0a08     xorlw	0x8                	XORLW	0x08
0008e0   e114     bnz	0x90a                	BNZ	_00172_DS_
                                           _00193_DS_:
0008e2   0100     movlb	0                  	BANKSEL	_time_trick_tics
                                           ;	.line	153; time.c	time_trick_tics = 0;
0008e4   6bf4     clrf	0xf4, 0x1           	CLRF	_time_trick_tics, B
0008e6   0100     movlb	0                  	BANKSEL	_time_trick_secs
                                           ;	.line	155; time.c	time_trick_secs++;
0008e8   2bf5     incf	0xf5, 0x1, 0x1      	INCF	_time_trick_secs, F, B
                                           ;	.line	156; time.c	if (time_trick_secs >= num_time_secs){
0008ea   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
0008ec   5df5     subwf	0xf5, 0, 0x1       	SUBWF	_time_trick_secs, W, B
0008ee   e30d     bnc	0x90a                	BNC	_00172_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	157; time.c	time_trick_secs = 0;
0008f0   6bf5     clrf	0xf5, 0x1           	CLRF	_time_trick_secs, B
0008f2   0100     movlb	0                  	BANKSEL	_time_trick_mins
                                           ;	.line	163; time.c	time_trick_mins++;
0008f4   2bf1     incf	0xf1, 0x1, 0x1      	INCF	_time_trick_mins, F, B
                                           ;	.line	164; time.c	if (time_trick_mins >= num_time_mins){
0008f6   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
0008f8   5df1     subwf	0xf1, 0, 0x1       	SUBWF	_time_trick_mins, W, B
0008fa   e307     bnc	0x90a                	BNC	_00172_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	165; time.c	time_trick_mins = 0;
0008fc   6bf1     clrf	0xf1, 0x1           	CLRF	_time_trick_mins, B
0008fe   0100     movlb	0                  	BANKSEL	_time_trick_hours
                                           ;	.line	167; time.c	time_trick_hours++;
000900   2bef     incf	0xef, 0x1, 0x1      	INCF	_time_trick_hours, F, B
                                           ;	.line	168; time.c	if (time_trick_hours >= num_time_hours){
000902   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
000904   5def     subwf	0xef, 0, 0x1       	SUBWF	_time_trick_hours, W, B
000906   e301     bnc	0x90a                	BNC	_00172_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	169; time.c	time_trick_hours = 0;
000908   6bef     clrf	0xef, 0x1           	CLRF	_time_trick_hours, B
                                           _00172_DS_:
00090a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00090c   f003
00090e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000910   f002
000912   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000914   f001
000916   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000918   f000
00091a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__clear_secs	code
                                           _clear_secs:
00117a   0100     movlb	0                  	BANKSEL	_time_secs
                                           ;	.line	88; time.c	time_secs = 0;
00117c   6bf2     clrf	0xf2, 0x1           	CLRF	_time_secs, B
00117e   0100     movlb	0                  	BANKSEL	_time_tics
                                           ;	.line	89; time.c	time_tics = 0;
001180   6bf3     clrf	0xf3, 0x1           	CLRF	_time_tics, B
                                           ;	.line	90; time.c	write_time_to_ds3231(ds3231_write_secs);
001182   0e00     movlw	0                  	MOVLW	0x00
001184   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
001186   ec93     call	0xb26, 0            	CALL	_write_time_to_ds3231
001188   f005
00118a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00118c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_mins	code
                                           _inc_mins:
0010b2   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	66; time.c	if (mode == normal_clock){
0010b4   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
0010b6   e10c     bnz	0x10d0               	BNZ	_00138_DS_
0010b8   0100     movlb	0                  	BANKSEL	_time_mins
                                           ;	.line	67; time.c	time_mins++;
0010ba   2bf0     incf	0xf0, 0x1, 0x1      	INCF	_time_mins, F, B
                                           ;	.line	68; time.c	if (time_mins >= num_time_mins)
0010bc   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
0010be   5df0     subwf	0xf0, 0, 0x1       	SUBWF	_time_mins, W, B
0010c0   e301     bnc	0x10c4               	BNC	_00134_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	69; time.c	time_mins = 0;
0010c2   6bf0     clrf	0xf0, 0x1           	CLRF	_time_mins, B
                                           _00134_DS_:
                                           ;	.line	70; time.c	write_time_to_ds3231(ds3231_write_mins);
0010c4   0e01     movlw	0x1                	MOVLW	0x01
0010c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010c8   ec93     call	0xb26, 0            	CALL	_write_time_to_ds3231
0010ca   f005
0010cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0010ce   d006     bra	0x10dc               	BRA	_00140_DS_
                                           _00138_DS_:
0010d0   0100     movlb	0                  	BANKSEL	_time_trick_mins
                                           ;	.line	72; time.c	time_trick_mins++;
0010d2   2bf1     incf	0xf1, 0x1, 0x1      	INCF	_time_trick_mins, F, B
                                           ;	.line	73; time.c	if (time_trick_mins >= num_time_mins)
0010d4   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
0010d6   5df1     subwf	0xf1, 0, 0x1       	SUBWF	_time_trick_mins, W, B
0010d8   e301     bnc	0x10dc               	BNC	_00140_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	74; time.c	time_trick_mins = 0;
0010da   6bf1     clrf	0xf1, 0x1           	CLRF	_time_trick_mins, B
                                           _00140_DS_:
0010dc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__dec_hours	code
                                           _dec_hours:
001082   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	53; time.c	if (mode == normal_clock){
001084   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
001086   e10d     bnz	0x10a2               	BNZ	_00126_DS_
001088   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	54; time.c	time_hours--;
00108a   07ee     decf	0xee, 0x1, 0x1      	DECF	_time_hours, F, B
                                           ;	.line	55; time.c	if (time_hours >= num_time_hours)
00108c   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
00108e   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
001090   e302     bnc	0x1096               	BNC	_00122_DS_
                                           ;	.line	56; time.c	time_hours = num_time_hours - 1;
001092   0e17     movlw	0x17               	MOVLW	0x17
                                           ; removed redundant BANKSEL
001094   6fee     movwf	0xee, 0x1          	MOVWF	_time_hours, B
                                           _00122_DS_:
                                           ;	.line	57; time.c	write_time_to_ds3231(ds3231_write_hours);
001096   0e02     movlw	0x2                	MOVLW	0x02
001098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00109a   ec93     call	0xb26, 0            	CALL	_write_time_to_ds3231
00109c   f005
00109e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0010a0   d007     bra	0x10b0               	BRA	_00128_DS_
                                           _00126_DS_:
0010a2   0100     movlb	0                  	BANKSEL	_time_trick_hours
                                           ;	.line	59; time.c	time_trick_hours--;
0010a4   07ef     decf	0xef, 0x1, 0x1      	DECF	_time_trick_hours, F, B
                                           ;	.line	60; time.c	if (time_trick_hours >= num_time_hours)
0010a6   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
0010a8   5def     subwf	0xef, 0, 0x1       	SUBWF	_time_trick_hours, W, B
0010aa   e302     bnc	0x10b0               	BNC	_00128_DS_
                                           ;	.line	61; time.c	time_trick_hours = num_time_hours - 1;
0010ac   0e17     movlw	0x17               	MOVLW	0x17
                                           ; removed redundant BANKSEL
0010ae   6fef     movwf	0xef, 0x1          	MOVWF	_time_trick_hours, B
                                           _00128_DS_:
0010b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_hours	code
                                           _inc_hours:
0010de   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	40; time.c	if (mode == normal_clock){
0010e0   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
0010e2   e10c     bnz	0x10fc               	BNZ	_00114_DS_
0010e4   0100     movlb	0                  	BANKSEL	_time_hours
                                           ;	.line	41; time.c	time_hours++;
0010e6   2bee     incf	0xee, 0x1, 0x1      	INCF	_time_hours, F, B
                                           ;	.line	42; time.c	if (time_hours >= num_time_hours)
0010e8   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
0010ea   5dee     subwf	0xee, 0, 0x1       	SUBWF	_time_hours, W, B
0010ec   e301     bnc	0x10f0               	BNC	_00110_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	43; time.c	time_hours = 0;
0010ee   6bee     clrf	0xee, 0x1           	CLRF	_time_hours, B
                                           _00110_DS_:
                                           ;	.line	44; time.c	write_time_to_ds3231(ds3231_write_hours);
0010f0   0e02     movlw	0x2                	MOVLW	0x02
0010f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f4   ec93     call	0xb26, 0            	CALL	_write_time_to_ds3231
0010f6   f005
0010f8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0010fa   d006     bra	0x1108               	BRA	_00116_DS_
                                           _00114_DS_:
0010fc   0100     movlb	0                  	BANKSEL	_time_trick_hours
                                           ;	.line	46; time.c	time_trick_hours++;
0010fe   2bef     incf	0xef, 0x1, 0x1      	INCF	_time_trick_hours, F, B
                                           ;	.line	47; time.c	if (time_trick_hours >= num_time_hours)
001100   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
001102   5def     subwf	0xef, 0, 0x1       	SUBWF	_time_trick_hours, W, B
001104   e301     bnc	0x1108               	BNC	_00116_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	48; time.c	time_trick_hours = 0;
001106   6bef     clrf	0xef, 0x1           	CLRF	_time_trick_hours, B
                                           _00116_DS_:
001108   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__init_time	code
                                           _init_time:
                                           ;	.line	30; time.c	init_ds3231();
0011a2   ec0a     call	0x1214, 0           	CALL	_init_ds3231
0011a4   f009
                                           ;	.line	34; time.c	delay100ktcy(1);
0011a6   0e01     movlw	0x1                	MOVLW	0x01
0011a8   ecf5     call	0xbea, 0            	CALL	_delay100ktcy
0011aa   f005
                                           ;	.line	36; time.c	read_time_from_ds3231();
0011ac   ec8e     call	0x91c, 0            	CALL	_read_time_from_ds3231
0011ae   f004
0011b0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  418 (0x01a2) bytes ( 0.32%)
                                           ;           	  209 (0x00d1) words
                                           ; udata size:	    8 (0x0008) bytes (12.50%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Mon Dec  8 23:52:53 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_user
                                           	global _do_user
                                           	global _mode
                                           	global _silly_hour_display
                                           	global _display_time
                                           	global _check_for_keypresses
                                           	global _check_brightness
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _time_tics
                                           	extern _time_secs
                                           	extern _time_mins
                                           	extern _time_hours
                                           	extern _time_trick_tics
                                           	extern _time_trick_secs
                                           	extern _time_trick_mins
                                           	extern _time_trick_hours
                                           	extern _dot1
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay10tcy
                                           	extern _inc_hours
                                           	extern _dec_hours
                                           	extern _inc_mins
                                           	extern _clear_secs
                                           	extern _init_display
                                           	extern _display_digits_real
                                           	extern _trigger_save_eeprom
                                           	extern _save_eeprom_fully
                                           	extern _to_bcd
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           
                                           udata_user_0	udata
                                           _hours_debounce	res	2
                                           
                                           udata_user_1	udata
                                           _mins_debounce	res	2
                                           
                                           udata_user_2	udata
                                           _secs_debounce	res	2
                                           
                                           udata_user_3	udata
                                           _mode	res	1
                                           
                                           udata_user_4	udata
                                           _silly_hour_display	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_user__do_user	code
                                           _do_user:
                                           ;	.line	210; user.c	check_brightness();
0011c0   ecee     call	0x11dc, 0           	CALL	_check_brightness
0011c2   f008
                                           ;	.line	211; user.c	check_for_keypresses();
0011c4   ec15     call	0x2a, 0             	CALL	_check_for_keypresses
0011c6   f000
                                           ;	.line	212; user.c	display_time();
0011c8   ec7f     call	0x6fe, 0            	CALL	_display_time
0011ca   f003
0011cc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__check_brightness	code
                                           _check_brightness:
                                           ;	.line	204; user.c	ADCON0bits.GO = 1;
0011dc   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
                                           _00278_DS_:
                                           ;	.line	205; user.c	while (ADCON0bits.GO);
0011de   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
0011e0   d7fe     bra	0x11de               	BRA	_00278_DS_
                                           ;	.line	206; user.c	CCPR1L = ADRESH;
0011e2   cfc4     movff	0xfc4, 0xfbe       	MOVFF	_ADRESH, _CCPR1L
0011e4   ffbe
0011e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__check_for_keypresses	code
                                           _check_for_keypresses:
                                           ;	.line	159; user.c	void check_for_keypresses(){
00002a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00002c   ffe5
00002e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000030   ffe5
000032   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000034   ffe5
000036   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000038   ffe5
                                           ;	.line	161; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
00003a   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00003c   d02d     bra	0x98                 	BRA	_00196_DS_
00003e   0e7c     movlw	0x7c               	MOVLW	0x7c
000040   0100     movlb	0                  	BANKSEL	_hours_debounce
000042   5de7     subwf	0xe7, 0, 0x1       	SUBWF	_hours_debounce, W, B
000044   e229     bc	0x98                  	BC	_00196_DS_
000046   6a00     clrf	0, 0                	CLRF	r0x00
000048   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00004a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00004c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00004e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000050   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000052   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000054   6a00     clrf	0, 0                	CLRF	r0x00
000056   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
000058   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00005a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00005c   e01d     bz	0x98                  	BZ	_00196_DS_
                                           ;	.line	162; user.c	inc_hours();
00005e   ec6f     call	0x10de, 0           	CALL	_inc_hours
000060   f008
                                           ;	.line	163; user.c	inc_metric_sw_hours();
000062   c0c4     movff	0xc4, 0            	MOVFF	(_eeprom_data + 4), r0x00
000064   f000
000066   c0c5     movff	0xc5, 0x1          	MOVFF	(_eeprom_data + 5), r0x01
000068   f001
00006a   c0c6     movff	0xc6, 0x2          	MOVFF	(_eeprom_data + 6), r0x02
00006c   f002
00006e   c0c7     movff	0xc7, 0x3          	MOVFF	(_eeprom_data + 7), r0x03
000070   f003
000072   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000074   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000076   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000078   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00007a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00007c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00007e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000080   5000     movf	0, 0, 0             	MOVF	r0x00, W
000082   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
000084   6fc4     movwf	0xc4, 0x1          	MOVWF	(_eeprom_data + 4), B
000086   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000088   6fc5     movwf	0xc5, 0x1          	MOVWF	(_eeprom_data + 5), B
00008a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00008c   6fc6     movwf	0xc6, 0x1          	MOVWF	(_eeprom_data + 6), B
00008e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000090   6fc7     movwf	0xc7, 0x1          	MOVWF	(_eeprom_data + 7), B
000092   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
000094   f009
000096   d029     bra	0xea                 	BRA	_00197_DS_
                                           _00196_DS_:
000098   0100     movlb	0                  	BANKSEL	_hours_debounce
                                           ;	.line	164; user.c	} else if (debounce_held_down(hours_debounce,hours_switch_raw)) {
00009a   51e7     movf	0xe7, 0, 0x1        	MOVF	_hours_debounce, W, B
00009c   0a01     xorlw	0x1                	XORLW	0x01
00009e   e125     bnz	0xea                 	BNZ	_00197_DS_
0000a0   6a00     clrf	0, 0                	CLRF	r0x00
0000a2   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0000a4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0000a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000a8   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0000aa   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0000ac   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0000ae   6a00     clrf	0, 0                	CLRF	r0x00
0000b0   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0000b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000b4   0a01     xorlw	0x1                	XORLW	0x01
0000b6   e119     bnz	0xea                 	BNZ	_00197_DS_
                                           _00255_DS_:
0000b8   0100     movlb	0                  	BANKSEL	_silly_hour_display
                                           ;	.line	165; user.c	silly_hour_display = !silly_hour_display;
0000ba   51f7     movf	0xf7, 0, 0x1        	MOVF	_silly_hour_display, W, B
0000bc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0000be   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0000c0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           ; removed redundant BANKSEL
0000c2   6bf7     clrf	0xf7, 0x1           	CLRF	_silly_hour_display, B
0000c4   37f7     rlcf	0xf7, 0x1, 0x1      	RLCF	_silly_hour_display, F, B
                                           ;	.line	166; user.c	eeprom_write_uint32(silly_hour_display,EEPROM_ADDR_SILLY_HOUR_DISPLAY);
0000c6   c0f7     movff	0xf7, 0            	MOVFF	_silly_hour_display, r0x00
0000c8   f000
0000ca   6a01     clrf	0x1, 0              	CLRF	r0x01
0000cc   6a02     clrf	0x2, 0              	CLRF	r0x02
0000ce   6a03     clrf	0x3, 0              	CLRF	r0x03
0000d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000d2   0100     movlb	0                  	BANKSEL	(_eeprom_data + 32)
0000d4   6fe0     movwf	0xe0, 0x1          	MOVWF	(_eeprom_data + 32), B
0000d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0000d8   6fe1     movwf	0xe1, 0x1          	MOVWF	(_eeprom_data + 33), B
0000da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0000dc   6fe2     movwf	0xe2, 0x1          	MOVWF	(_eeprom_data + 34), B
0000de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0000e0   6fe3     movwf	0xe3, 0x1          	MOVWF	(_eeprom_data + 35), B
                                           ;	.line	167; user.c	trigger_save_eeprom();
0000e2   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
0000e4   f009
                                           ;	.line	170; user.c	dec_hours();
0000e6   ec41     call	0x1082, 0           	CALL	_dec_hours
0000e8   f008
                                           _00197_DS_:
                                           ;	.line	173; user.c	if (debounce_just_pressed(mins_debounce,mins_switch_raw)){
0000ea   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0000ec   d02c     bra	0x146                	BRA	_00201_DS_
0000ee   0e7c     movlw	0x7c               	MOVLW	0x7c
0000f0   0100     movlb	0                  	BANKSEL	_mins_debounce
0000f2   5de9     subwf	0xe9, 0, 0x1       	SUBWF	_mins_debounce, W, B
0000f4   e228     bc	0x146                 	BC	_00201_DS_
0000f6   6a00     clrf	0, 0                	CLRF	r0x00
0000f8   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
0000fa   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0000fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000fe   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000100   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000102   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000104   6a00     clrf	0, 0                	CLRF	r0x00
000106   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
000108   51ea     movf	0xea, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
00010a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00010c   e01c     bz	0x146                 	BZ	_00201_DS_
                                           ;	.line	174; user.c	inc_mins();
00010e   ec59     call	0x10b2, 0           	CALL	_inc_mins
000110   f008
                                           ;	.line	175; user.c	inc_metric_sw_mins();
000112   c0c8     movff	0xc8, 0            	MOVFF	(_eeprom_data + 8), r0x00
000114   f000
000116   c0c9     movff	0xc9, 0x1          	MOVFF	(_eeprom_data + 9), r0x01
000118   f001
00011a   c0ca     movff	0xca, 0x2          	MOVFF	(_eeprom_data + 10), r0x02
00011c   f002
00011e   c0cb     movff	0xcb, 0x3          	MOVFF	(_eeprom_data + 11), r0x03
000120   f003
000122   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000124   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000126   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000128   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00012a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00012c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00012e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000130   5000     movf	0, 0, 0             	MOVF	r0x00, W
000132   0100     movlb	0                  	BANKSEL	(_eeprom_data + 8)
000134   6fc8     movwf	0xc8, 0x1          	MOVWF	(_eeprom_data + 8), B
000136   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000138   6fc9     movwf	0xc9, 0x1          	MOVWF	(_eeprom_data + 9), B
00013a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00013c   6fca     movwf	0xca, 0x1          	MOVWF	(_eeprom_data + 10), B
00013e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000140   6fcb     movwf	0xcb, 0x1          	MOVWF	(_eeprom_data + 11), B
000142   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
000144   f009
                                           _00201_DS_:
                                           ;	.line	178; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
000146   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTA, 7
000148   d039     bra	0x1bc                	BRA	_00211_DS_
00014a   0e7c     movlw	0x7c               	MOVLW	0x7c
00014c   0100     movlb	0                  	BANKSEL	_secs_debounce
00014e   5deb     subwf	0xeb, 0, 0x1       	SUBWF	_secs_debounce, W, B
000150   e235     bc	0x1bc                 	BC	_00211_DS_
000152   0e80     movlw	0x80               	MOVLW	0x80
000154   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000156   6e00     movwf	0, 0               	MOVWF	r0x00
000158   5000     movf	0, 0, 0             	MOVF	r0x00, W
00015a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00015c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00015e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000160   6a00     clrf	0, 0                	CLRF	r0x00
000162   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
000164   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000166   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000168   e029     bz	0x1bc                 	BZ	_00211_DS_
                                           _00262_DS_:
00016a   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	179; user.c	if (mode == normal_clock){
00016c   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
00016e   e109     bnz	0x182                	BNZ	_00205_DS_
                                           ;	.line	180; user.c	time_trick_hours = time_hours;
000170   c0ee     movff	0xee, 0xef         	MOVFF	_time_hours, _time_trick_hours
000172   f0ef
                                           ;	.line	181; user.c	time_trick_mins = time_mins;
000174   c0f0     movff	0xf0, 0xf1         	MOVFF	_time_mins, _time_trick_mins
000176   f0f1
                                           ;	.line	182; user.c	time_trick_secs = time_secs;
000178   c0f2     movff	0xf2, 0xf5         	MOVFF	_time_secs, _time_trick_secs
00017a   f0f5
                                           ;	.line	183; user.c	mode = trick_clock;
00017c   0e01     movlw	0x1                	MOVLW	0x01
                                           ; removed redundant BANKSEL
00017e   6ff6     movwf	0xf6, 0x1          	MOVWF	_mode, B
000180   d002     bra	0x186                	BRA	_00206_DS_
                                           _00205_DS_:
000182   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	185; user.c	mode = normal_clock;
000184   6bf6     clrf	0xf6, 0x1           	CLRF	_mode, B
                                           _00206_DS_:
                                           ;	.line	187; user.c	inc_metric_sw_secs();
000186   c0cc     movff	0xcc, 0            	MOVFF	(_eeprom_data + 12), r0x00
000188   f000
00018a   c0cd     movff	0xcd, 0x1          	MOVFF	(_eeprom_data + 13), r0x01
00018c   f001
00018e   c0ce     movff	0xce, 0x2          	MOVFF	(_eeprom_data + 14), r0x02
000190   f002
000192   c0cf     movff	0xcf, 0x3          	MOVFF	(_eeprom_data + 15), r0x03
000194   f003
000196   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000198   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00019a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00019c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00019e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0001a0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001a2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0001a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001a6   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
0001a8   6fcc     movwf	0xcc, 0x1          	MOVWF	(_eeprom_data + 12), B
0001aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0001ac   6fcd     movwf	0xcd, 0x1          	MOVWF	(_eeprom_data + 13), B
0001ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0001b0   6fce     movwf	0xce, 0x1          	MOVWF	(_eeprom_data + 14), B
0001b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0001b4   6fcf     movwf	0xcf, 0x1          	MOVWF	(_eeprom_data + 15), B
0001b6   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
0001b8   f009
0001ba   d031     bra	0x21e                	BRA	_00212_DS_
                                           _00211_DS_:
0001bc   0100     movlb	0                  	BANKSEL	_secs_debounce
                                           ;	.line	188; user.c	} else if (debounce_held_down(secs_debounce,secs_switch_raw)){
0001be   51eb     movf	0xeb, 0, 0x1        	MOVF	_secs_debounce, W, B
0001c0   0a01     xorlw	0x1                	XORLW	0x01
0001c2   e12d     bnz	0x21e                	BNZ	_00212_DS_
0001c4   0e80     movlw	0x80               	MOVLW	0x80
0001c6   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0001c8   6e00     movwf	0, 0               	MOVWF	r0x00
0001ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001cc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001ce   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001d0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001d2   6a00     clrf	0, 0                	CLRF	r0x00
0001d4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0001d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001d8   0a01     xorlw	0x1                	XORLW	0x01
0001da   e121     bnz	0x21e                	BNZ	_00212_DS_
                                           _00267_DS_:
0001dc   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	189; user.c	mode = normal_clock;
0001de   6bf6     clrf	0xf6, 0x1           	CLRF	_mode, B
                                           ;	.line	190; user.c	clear_secs();
0001e0   ecbd     call	0x117a, 0           	CALL	_clear_secs
0001e2   f008
                                           ;	.line	193; user.c	time_secs += secs_to_real_secs_divider * 2;
0001e4   0e08     movlw	0x8                	MOVLW	0x08
0001e6   0100     movlb	0                  	BANKSEL	_time_secs
0001e8   27f2     addwf	0xf2, 0x1, 0x1     	ADDWF	_time_secs, F, B
                                           ;	.line	194; user.c	inc_metric_sw_secs();
0001ea   c0cc     movff	0xcc, 0            	MOVFF	(_eeprom_data + 12), r0x00
0001ec   f000
0001ee   c0cd     movff	0xcd, 0x1          	MOVFF	(_eeprom_data + 13), r0x01
0001f0   f001
0001f2   c0ce     movff	0xce, 0x2          	MOVFF	(_eeprom_data + 14), r0x02
0001f4   f002
0001f6   c0cf     movff	0xcf, 0x3          	MOVFF	(_eeprom_data + 15), r0x03
0001f8   f003
0001fa   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0001fc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001fe   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000200   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000202   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000204   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000206   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000208   5000     movf	0, 0, 0             	MOVF	r0x00, W
00020a   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
00020c   6fcc     movwf	0xcc, 0x1          	MOVWF	(_eeprom_data + 12), B
00020e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000210   6fcd     movwf	0xcd, 0x1          	MOVWF	(_eeprom_data + 13), B
000212   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000214   6fce     movwf	0xce, 0x1          	MOVWF	(_eeprom_data + 14), B
000216   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000218   6fcf     movwf	0xcf, 0x1          	MOVWF	(_eeprom_data + 15), B
00021a   ec0d     call	0x121a, 0           	CALL	_trigger_save_eeprom
00021c   f009
                                           _00212_DS_:
                                           ;	.line	197; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
00021e   6a00     clrf	0, 0                	CLRF	r0x00
000220   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000222   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000224   5000     movf	0, 0, 0             	MOVF	r0x00, W
000226   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000228   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00022a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00022c   6a00     clrf	0, 0                	CLRF	r0x00
00022e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000230   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
000232   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
000234   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000236   e00e     bz	0x254                 	BZ	_00216_DS_
000238   0e7f     movlw	0x7f               	MOVLW	0x7f
00023a   0100     movlb	0                  	BANKSEL	_hours_debounce
00023c   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
00023e   6a00     clrf	0, 0                	CLRF	r0x00
000240   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000242   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000244   5000     movf	0, 0, 0             	MOVF	r0x00, W
000246   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000248   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00024a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00024c   6a00     clrf	0, 0                	CLRF	r0x00
00024e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000250   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000252   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00216_DS_:
000254   c0e7     movff	0xe7, 0            	MOVFF	_hours_debounce, r0x00
000256   f000
000258   5000     movf	0, 0, 0             	MOVF	r0x00, W
00025a   e004     bz	0x264                 	BZ	_00218_DS_
00025c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00025e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000260   0100     movlb	0                  	BANKSEL	_hours_debounce
000262   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
                                           _00218_DS_:
                                           ;	.line	198; user.c	debounce_add_sample(mins_debounce,mins_switch_raw);
000264   6a00     clrf	0, 0                	CLRF	r0x00
000266   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
000268   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00026a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00026c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00026e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000270   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000272   6a00     clrf	0, 0                	CLRF	r0x00
000274   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000276   0100     movlb	0                  	BANKSEL	(_mins_debounce + 1)
000278   51ea     movf	0xea, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
00027a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00027c   e00e     bz	0x29a                 	BZ	_00220_DS_
00027e   0e7f     movlw	0x7f               	MOVLW	0x7f
000280   0100     movlb	0                  	BANKSEL	_mins_debounce
000282   6fe9     movwf	0xe9, 0x1          	MOVWF	_mins_debounce, B
000284   6a00     clrf	0, 0                	CLRF	r0x00
000286   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
000288   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00028a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00028c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00028e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000290   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000292   6a00     clrf	0, 0                	CLRF	r0x00
000294   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000296   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000298   6fea     movwf	0xea, 0x1          	MOVWF	(_mins_debounce + 1), B
                                           _00220_DS_:
00029a   c0e9     movff	0xe9, 0            	MOVFF	_mins_debounce, r0x00
00029c   f000
00029e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002a0   e004     bz	0x2aa                 	BZ	_00222_DS_
0002a2   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002a6   0100     movlb	0                  	BANKSEL	_mins_debounce
0002a8   6fe9     movwf	0xe9, 0x1          	MOVWF	_mins_debounce, B
                                           _00222_DS_:
                                           ;	.line	199; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
0002aa   0e80     movlw	0x80               	MOVLW	0x80
0002ac   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0002ae   6e00     movwf	0, 0               	MOVWF	r0x00
0002b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002b2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0002b4   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0002b6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0002b8   6a00     clrf	0, 0                	CLRF	r0x00
0002ba   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0002bc   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
0002be   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0002c0   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0002c2   e00e     bz	0x2e0                 	BZ	_00224_DS_
0002c4   0e7f     movlw	0x7f               	MOVLW	0x7f
0002c6   0100     movlb	0                  	BANKSEL	_secs_debounce
0002c8   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
0002ca   0e80     movlw	0x80               	MOVLW	0x80
0002cc   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
0002ce   6e00     movwf	0, 0               	MOVWF	r0x00
0002d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002d2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0002d4   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0002d6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0002d8   6a00     clrf	0, 0                	CLRF	r0x00
0002da   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0002dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0002de   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00224_DS_:
0002e0   c0eb     movff	0xeb, 0            	MOVFF	_secs_debounce, r0x00
0002e2   f000
0002e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002e6   e004     bz	0x2f0                 	BZ	_00227_DS_
0002e8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002ec   0100     movlb	0                  	BANKSEL	_secs_debounce
0002ee   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
                                           _00227_DS_:
0002f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0002f2   f003
0002f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0002f6   f002
0002f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0002fa   f001
0002fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0002fe   f000
000300   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__display_time	code
                                           _display_time:
                                           ;	.line	117; user.c	void display_time(){
0006fe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000700   ffe5
000702   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000704   ffe5
000706   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000708   ffe5
00070a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00070c   ffe5
00070e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000710   ffe5
000712   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000714   ffe5
000716   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	122; user.c	adj_secs = (TIME(secs) / (secs_to_real_secs_divider / 1)) % 60;
000718   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
00071a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00071c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00071e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000720   6a00     clrf	0, 0                	CLRF	r0x00
000722   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000724   5000     movf	0, 0, 0             	MOVF	r0x00, W
000726   e003     bz	0x72e                 	BZ	_00182_DS_
000728   c0f2     movff	0xf2, 0x1          	MOVFF	_time_secs, r0x01
00072a   f001
00072c   d002     bra	0x732                	BRA	_00183_DS_
                                           _00182_DS_:
00072e   c0f5     movff	0xf5, 0x1          	MOVFF	_time_trick_secs, r0x01
000730   f001
                                           _00183_DS_:
000732   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000734   3001     rrcf	0x1, 0, 0           	RRCF	r0x01, W
000736   6e01     movwf	0x1, 0             	MOVWF	r0x01
000738   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00073a   3201     rrcf	0x1, 0x1, 0         	RRCF	r0x01, F
00073c   0e3c     movlw	0x3c               	MOVLW	0x3c
00073e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000740   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000742   ffe5
000744   ec21     call	0xc42, 0            	CALL	__moduchar
000746   f006
000748   6e01     movwf	0x1, 0             	MOVWF	r0x01
00074a   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
00074c   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
                                           ;	.line	125; user.c	set_dots(false,true,true,true,true,false);
00074e   0e01     movlw	0x1                	MOVLW	0x01
000750   0100     movlb	0                  	BANKSEL	_dot1
000752   6fe4     movwf	0xe4, 0x1          	MOVWF	_dot1, B
                                           ;	.line	128; user.c	adj_hours = TIME(hours);
000754   5000     movf	0, 0, 0             	MOVF	r0x00, W
000756   e003     bz	0x75e                 	BZ	_00184_DS_
000758   c0ee     movff	0xee, 0            	MOVFF	_time_hours, r0x00
00075a   f000
00075c   d002     bra	0x762                	BRA	_00185_DS_
                                           _00184_DS_:
00075e   c0ef     movff	0xef, 0            	MOVFF	_time_trick_hours, r0x00
000760   f000
                                           _00185_DS_:
000762   0100     movlb	0                  	BANKSEL	_silly_hour_display
                                           ;	.line	129; user.c	if (silly_hour_display){
000764   51f7     movf	0xf7, 0, 0x1        	MOVF	_silly_hour_display, W, B
000766   e00c     bz	0x780                 	BZ	_00176_DS_
                                           ;	.line	130; user.c	if (adj_hours >= 12){
000768   0e0c     movlw	0xc                	MOVLW	0x0c
00076a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
00076c   e303     bnc	0x774                	BNC	_00171_DS_
                                           ;	.line	131; user.c	adj_hours = adj_hours - 12;
00076e   0ef4     movlw	0xf4               	MOVLW	0xf4
000770   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000772   d002     bra	0x778                	BRA	_00172_DS_
                                           _00171_DS_:
000774   0100     movlb	0                  	BANKSEL	_dot1
                                           ;	.line	134; user.c	set_dots(false,false,true,true,true,false);
000776   6be4     clrf	0xe4, 0x1           	CLRF	_dot1, B
                                           _00172_DS_:
                                           ;	.line	136; user.c	if (!adj_hours)
000778   5000     movf	0, 0, 0             	MOVF	r0x00, W
00077a   e102     bnz	0x780                	BNZ	_00176_DS_
                                           ;	.line	137; user.c	adj_hours = 12; // blah, so much work for such sillyness
00077c   0e0c     movlw	0xc                	MOVLW	0x0c
00077e   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00176_DS_:
                                           ;	.line	139; user.c	adj_hours = to_bcd(adj_hours);
000780   5000     movf	0, 0, 0             	MOVF	r0x00, W
000782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000784   eccb     call	0xd96, 0            	CALL	_to_bcd
000786   f006
000788   6e00     movwf	0, 0               	MOVWF	r0x00
00078a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	141; user.c	h0 = adj_hours / 16;
00078c   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
00078e   0b0f     andlw	0xf                	ANDLW	0x0f
000790   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	142; user.c	if (!h0 && silly_hour_display)
000792   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000794   e105     bnz	0x7a0                	BNZ	_00178_DS_
000796   0100     movlb	0                  	BANKSEL	_silly_hour_display
000798   51f7     movf	0xf7, 0, 0x1        	MOVF	_silly_hour_display, W, B
00079a   e002     bz	0x7a0                 	BZ	_00178_DS_
                                           ;	.line	143; user.c	h0 = CHAR_BLANK; // remove leading zeros for hours
00079c   0e10     movlw	0x10               	MOVLW	0x10
00079e   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00178_DS_:
                                           ;	.line	148; user.c	h1 = adj_hours % 16;
0007a0   0e0f     movlw	0xf                	MOVLW	0x0f
0007a2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0007a4   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	151; user.c	adj_mins = to_bcd(TIME(mins));
0007a6   51f6     movf	0xf6, 0, 0x1        	MOVF	_mode, W, B
0007a8   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0007aa   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0007ac   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0007ae   6a03     clrf	0x3, 0              	CLRF	r0x03
0007b0   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
0007b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007b4   e003     bz	0x7bc                 	BZ	_00186_DS_
0007b6   c0f0     movff	0xf0, 0x3          	MOVFF	_time_mins, r0x03
0007b8   f003
0007ba   d002     bra	0x7c0                	BRA	_00187_DS_
                                           _00186_DS_:
0007bc   c0f1     movff	0xf1, 0x3          	MOVFF	_time_trick_mins, r0x03
0007be   f003
                                           _00187_DS_:
0007c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007c4   eccb     call	0xd96, 0            	CALL	_to_bcd
0007c6   f006
0007c8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0007ca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	152; user.c	adj_secs = to_bcd(adj_secs);
0007cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   eccb     call	0xd96, 0            	CALL	_to_bcd
0007d2   f006
0007d4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	153; user.c	display_digits(
0007d8   3803     swapf	0x3, 0, 0          	SWAPF	r0x03, W
0007da   0b0f     andlw	0xf                	ANDLW	0x0f
0007dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0007de   0e0f     movlw	0xf                	MOVLW	0x0f
0007e0   1603     andwf	0x3, 0x1, 0        	ANDWF	r0x03, F
0007e2   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
0007e4   0b0f     andlw	0xf                	ANDLW	0x0f
0007e6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0007e8   0e0f     movlw	0xf                	MOVLW	0x0f
0007ea   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
0007ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007f0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0007f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007f4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0007fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000804   ecb9     call	0x572, 0            	CALL	_display_digits_real
000806   f002
000808   0e06     movlw	0x6                	MOVLW	0x06
00080a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00080c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00080e   f005
000810   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000812   f004
000814   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000816   f003
000818   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00081a   f002
00081c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00081e   f001
000820   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000822   f000
000824   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__init_user	code
                                           _init_user:
                                           ;	.line	48; user.c	void init_user(){
000302   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000304   ffe5
000306   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000308   ffe5
00030a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00030c   ffe5
00030e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000310   ffe5
000312   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000314   ffe5
000316   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000318   ffe5
00031a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00031c   ffe5
                                           ;	.line	51; user.c	init_display();
00031e   ec85     call	0x110a, 0           	CALL	_init_display
000320   f008
                                           ;	.line	53; user.c	TRISBbits.TRISB2 = 1;
000322   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	61; user.c	TRISA = TRISA | b(11010001);
000324   0ed1     movlw	0xd1               	MOVLW	0xd1
000326   1292     iorwf	0x92, 0x1, 0       	IORWF	_TRISA, F
                                           ;	.line	65; user.c	ADCON0 = b(00000001);
000328   0e01     movlw	0x1                	MOVLW	0x01
00032a   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	66; user.c	ADCON1 = b(01111110);
00032c   0e7e     movlw	0x7e               	MOVLW	0x7e
00032e   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	67; user.c	ADCON2 = b(00000000);
000330   6ac0     clrf	0xc0, 0             	CLRF	_ADCON2
                                           ;	.line	69; user.c	CCP1CON = b(00001100);
000332   0e0c     movlw	0xc                	MOVLW	0x0c
000334   6ebd     movwf	0xbd, 0            	MOVWF	_CCP1CON
                                           ;	.line	70; user.c	PR2 = 0xFF;
000336   0eff     movlw	0xff               	MOVLW	0xff
000338   6ecb     movwf	0xcb, 0            	MOVWF	_PR2
                                           ;	.line	71; user.c	T2CON = b(00000100);
00033a   0e04     movlw	0x4                	MOVLW	0x04
00033c   6eca     movwf	0xca, 0            	MOVWF	_T2CON
                                           ;	.line	72; user.c	CCPR1L = 0x00;
00033e   6abe     clrf	0xbe, 0             	CLRF	_CCPR1L
000340   0100     movlb	0                  	BANKSEL	_hours_debounce
                                           ;	.line	74; user.c	debounce_init(hours_debounce,hours_switch_raw);
000342   6be7     clrf	0xe7, 0x1           	CLRF	_hours_debounce, B
000344   6a00     clrf	0, 0                	CLRF	r0x00
000346   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000348   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00034a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00034c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00034e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000350   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000352   6a00     clrf	0, 0                	CLRF	r0x00
000354   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000356   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000358   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
00035a   0100     movlb	0                  	BANKSEL	_mins_debounce
                                           ;	.line	75; user.c	debounce_init(mins_debounce,mins_switch_raw);
00035c   6be9     clrf	0xe9, 0x1           	CLRF	_mins_debounce, B
00035e   6a00     clrf	0, 0                	CLRF	r0x00
000360   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
000362   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000364   5000     movf	0, 0, 0             	MOVF	r0x00, W
000366   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000368   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00036a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00036c   6a00     clrf	0, 0                	CLRF	r0x00
00036e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000370   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000372   6fea     movwf	0xea, 0x1          	MOVWF	(_mins_debounce + 1), B
000374   0100     movlb	0                  	BANKSEL	_secs_debounce
                                           ;	.line	76; user.c	debounce_init(secs_debounce,secs_switch_raw);
000376   6beb     clrf	0xeb, 0x1           	CLRF	_secs_debounce, B
000378   0e80     movlw	0x80               	MOVLW	0x80
00037a   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
00037c   6e00     movwf	0, 0               	MOVWF	r0x00
00037e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000380   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000382   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000384   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000386   6a00     clrf	0, 0                	CLRF	r0x00
000388   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00038a   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00038c   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
00038e   0100     movlb	0                  	BANKSEL	_mode
                                           ;	.line	78; user.c	mode = normal_clock;
000390   6bf6     clrf	0xf6, 0x1           	CLRF	_mode, B
                                           ;	.line	80; user.c	if (!hours_switch_raw && mins_switch_raw && !secs_switch_raw){
000392   a481     btfss	0x81, 0x2, 0       	BTFSS	_PORTBbits, 2
000394   d0db     bra	0x54c                	BRA	_00129_DS_
000396   bc80     btfsc	0x80, 0x6, 0       	BTFSC	_PORTAbits, 6
000398   d0d9     bra	0x54c                	BRA	_00129_DS_
00039a   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTA, 7
00039c   d0d7     bra	0x54c                	BRA	_00129_DS_
                                           ;	.line	82; user.c	inc_metric_meta();
00039e   c0d8     movff	0xd8, 0            	MOVFF	(_eeprom_data + 24), r0x00
0003a0   f000
0003a2   c0d9     movff	0xd9, 0x1          	MOVFF	(_eeprom_data + 25), r0x01
0003a4   f001
0003a6   c0da     movff	0xda, 0x2          	MOVFF	(_eeprom_data + 26), r0x02
0003a8   f002
0003aa   c0db     movff	0xdb, 0x3          	MOVFF	(_eeprom_data + 27), r0x03
0003ac   f003
0003ae   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003b2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0003b4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003b6   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0003b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003ba   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0003bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003be   0100     movlb	0                  	BANKSEL	(_eeprom_data + 24)
0003c0   6fd8     movwf	0xd8, 0x1          	MOVWF	(_eeprom_data + 24), B
0003c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0003c4   6fd9     movwf	0xd9, 0x1          	MOVWF	(_eeprom_data + 25), B
0003c6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0003c8   6fda     movwf	0xda, 0x1          	MOVWF	(_eeprom_data + 26), B
0003ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0003cc   6fdb     movwf	0xdb, 0x1          	MOVWF	(_eeprom_data + 27), B
0003ce   ecb3     call	0x1166, 0           	CALL	_save_eeprom_fully
0003d0   f008
                                           ;	.line	87; user.c	i = 0;
0003d2   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00126_DS_:
                                           ;	.line	89; user.c	display_digits(
0003d4   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0003d6   0b0f     andlw	0xf                	ANDLW	0x0f
0003d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0003da   0e0f     movlw	0xf                	MOVLW	0x0f
0003dc   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
0003de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0003e0   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
0003e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003e4   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
0003e6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e8   0e80     movlw	0x80               	MOVLW	0x80
0003ea   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003ee   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0003f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0003f2   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0003f4   6ae8     clrf	0xe8, 0             	CLRF	WREG
0003f6   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0003f8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0003fa   ffe9
0003fc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0003fe   fff3
000400   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000402   ec96     call	0x112c, 0           	CALL	__gptrget1
000404   f008
000406   6e03     movwf	0x3, 0             	MOVWF	r0x03
000408   3803     swapf	0x3, 0, 0          	SWAPF	r0x03, W
00040a   0b0f     andlw	0xf                	ANDLW	0x0f
00040c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00040e   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000410   6e05     movwf	0x5, 0             	MOVWF	r0x05
000412   0ec0     movlw	0xc0               	MOVLW	LOW(_eeprom_data)
000414   6e04     movwf	0x4, 0             	MOVWF	r0x04
000416   0e80     movlw	0x80               	MOVLW	0x80
000418   6e06     movwf	0x6, 0             	MOVWF	r0x06
00041a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00041c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00041e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000420   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000422   6ae8     clrf	0xe8, 0             	CLRF	WREG
000424   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000426   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000428   ffe9
00042a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00042c   fff3
00042e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000430   ec96     call	0x112c, 0           	CALL	__gptrget1
000432   f008
000434   6e04     movwf	0x4, 0             	MOVWF	r0x04
000436   0e0f     movlw	0xf                	MOVLW	0x0f
000438   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
00043a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   0e10     movlw	0x10               	MOVLW	0x10
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000448   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00044a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00044c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00044e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000450   ecb9     call	0x572, 0            	CALL	_display_digits_real
000452   f002
000454   0e06     movlw	0x6                	MOVLW	0x06
000456   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	95; user.c	delay10tcy(1);
000458   0e01     movlw	0x1                	MOVLW	0x01
00045a   ece9     call	0xbd2, 0            	CALL	_delay10tcy
00045c   f005
                                           ;	.line	97; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
00045e   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
000460   d015     bra	0x48c                	BRA	_00108_DS_
000462   0e7c     movlw	0x7c               	MOVLW	0x7c
000464   0100     movlb	0                  	BANKSEL	_hours_debounce
000466   5de7     subwf	0xe7, 0, 0x1       	SUBWF	_hours_debounce, W, B
000468   e211     bc	0x48c                 	BC	_00108_DS_
00046a   6a01     clrf	0x1, 0              	CLRF	r0x01
00046c   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
00046e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000470   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000472   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000474   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000476   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000478   6a01     clrf	0x1, 0              	CLRF	r0x01
00047a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
00047c   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00047e   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000480   e005     bz	0x48c                 	BZ	_00108_DS_
                                           ;	.line	98; user.c	i++;
000482   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	99; user.c	if (i >= sizeof(eeprom_data))
000484   0e24     movlw	0x24               	MOVLW	0x24
000486   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000488   e301     bnc	0x48c                	BNC	_00108_DS_
                                           ;	.line	100; user.c	i = 0;
00048a   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00108_DS_:
                                           ;	.line	102; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
00048c   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTA, 7
00048e   d016     bra	0x4bc                	BRA	_00114_DS_
000490   0e7c     movlw	0x7c               	MOVLW	0x7c
000492   0100     movlb	0                  	BANKSEL	_secs_debounce
000494   5deb     subwf	0xeb, 0, 0x1       	SUBWF	_secs_debounce, W, B
000496   e212     bc	0x4bc                 	BC	_00114_DS_
000498   0e80     movlw	0x80               	MOVLW	0x80
00049a   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
00049c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00049e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004a0   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004a2   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004a4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004a6   6a01     clrf	0x1, 0              	CLRF	r0x01
0004a8   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
0004aa   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0004ac   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0004ae   e006     bz	0x4bc                 	BZ	_00114_DS_
                                           ;	.line	103; user.c	i--;
0004b0   0600     decf	0, 0x1, 0           	DECF	r0x00, F
                                           ;	.line	104; user.c	if (i >= sizeof(eeprom_data))
0004b2   0e24     movlw	0x24               	MOVLW	0x24
0004b4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0004b6   e302     bnc	0x4bc                	BNC	_00114_DS_
                                           ;	.line	105; user.c	i = sizeof(eeprom_data) - 1;
0004b8   0e23     movlw	0x23               	MOVLW	0x23
0004ba   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00114_DS_:
                                           ;	.line	108; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
0004bc   6a01     clrf	0x1, 0              	CLRF	r0x01
0004be   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0004c0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0004c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004c4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004c6   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004c8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004ca   6a01     clrf	0x1, 0              	CLRF	r0x01
0004cc   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
0004ce   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
0004d0   51e8     movf	0xe8, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
0004d2   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0004d4   e00e     bz	0x4f2                 	BZ	_00118_DS_
0004d6   0e7f     movlw	0x7f               	MOVLW	0x7f
0004d8   0100     movlb	0                  	BANKSEL	_hours_debounce
0004da   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
0004dc   6a01     clrf	0x1, 0              	CLRF	r0x01
0004de   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0004e0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0004e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004e4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004e6   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004e8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004ea   6a01     clrf	0x1, 0              	CLRF	r0x01
0004ec   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
0004ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0004f0   6fe8     movwf	0xe8, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00118_DS_:
0004f2   c0e7     movff	0xe7, 0x1          	MOVFF	_hours_debounce, r0x01
0004f4   f001
0004f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004f8   e004     bz	0x502                 	BZ	_00120_DS_
0004fa   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0004fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004fe   0100     movlb	0                  	BANKSEL	_hours_debounce
000500   6fe7     movwf	0xe7, 0x1          	MOVWF	_hours_debounce, B
                                           _00120_DS_:
                                           ;	.line	109; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
000502   0e80     movlw	0x80               	MOVLW	0x80
000504   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000506   6e01     movwf	0x1, 0             	MOVWF	r0x01
000508   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00050a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00050c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00050e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000510   6a01     clrf	0x1, 0              	CLRF	r0x01
000512   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000514   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
000516   51ec     movf	0xec, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000518   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
00051a   e00e     bz	0x538                 	BZ	_00122_DS_
00051c   0e7f     movlw	0x7f               	MOVLW	0x7f
00051e   0100     movlb	0                  	BANKSEL	_secs_debounce
000520   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
000522   0e80     movlw	0x80               	MOVLW	0x80
000524   1480     andwf	0x80, 0, 0         	ANDWF	_PORTA, W
000526   6e01     movwf	0x1, 0             	MOVWF	r0x01
000528   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00052a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00052c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00052e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000530   6a01     clrf	0x1, 0              	CLRF	r0x01
000532   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000534   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000536   6fec     movwf	0xec, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00122_DS_:
000538   0100     movlb	0                  	BANKSEL	_secs_debounce
00053a   51eb     movf	0xeb, 0, 0x1        	MOVF	_secs_debounce, W, B
00053c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00053e   d74a     bra	0x3d4                	BRA	_00126_DS_
000540   c0eb     movff	0xeb, 0x1          	MOVFF	_secs_debounce, r0x01
000542   f001
000544   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000546   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000548   6feb     movwf	0xeb, 0x1          	MOVWF	_secs_debounce, B
00054a   d744     bra	0x3d4                	BRA	_00126_DS_
                                           _00129_DS_:
00054c   0100     movlb	0                  	BANKSEL	(_eeprom_data + 32)
                                           ;	.line	113; user.c	silly_hour_display = eeprom_read_uint32(EEPROM_ADDR_SILLY_HOUR_DISPLAY);
00054e   51e0     movf	0xe0, 0, 0x1        	MOVF	(_eeprom_data + 32), W, B
000550   0100     movlb	0                  	BANKSEL	_silly_hour_display
000552   6ff7     movwf	0xf7, 0x1          	MOVWF	_silly_hour_display, B
000554   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000556   f006
000558   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00055a   f005
00055c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00055e   f004
000560   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000562   f003
000564   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000566   f002
000568   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00056a   f001
00056c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00056e   f000
000570   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1674 (0x068a) bytes ( 1.28%)
                                           ;           	  837 (0x0345) words
                                           ; udata size:	    8 (0x0008) bytes (12.50%)
                                           ; access size:	    7 (0x0007) bytes
                                           
                                           
                                           	end
